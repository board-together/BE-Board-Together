---
http_interactions:
- request:
    method: get
    uri: https://api.boardgameatlas.com/api/search?client_id=<client_id>&name=cat
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v2.7.4
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - Cowboy
      Connection:
      - keep-alive
      X-Powered-By:
      - Express
      Content-Security-Policy:
      - 'default-src ''self'' https://* s3.us-west-1.amazonaws.com www.google-analytics.com
        stats.g.doubleclick.net www.youtube.com anchor.fm www.googletagmanager.com;script-src
        * ''unsafe-inline'' ''unsafe-eval'';img-src * data:;frame-ancestors ''self''
        https://*.mybigcommerce.com;upgrade-insecure-requests;base-uri ''self'';block-all-mixed-content;font-src
        ''self'' https: data:;object-src ''none'';script-src-attr ''none'';style-src
        ''self'' https: ''unsafe-inline'''
      X-Ratelimit-Limit:
      - '420'
      X-Ratelimit-Remaining:
      - '418'
      Date:
      - Mon, 17 Jul 2023 18:24:55 GMT
      X-Ratelimit-Reset:
      - '1689618321'
      Access-Control-Allow-Origin:
      - "*"
      Access-Control-Allow-Headers:
      - Origin, X-Requested-With, Content-Type, Accept
      Content-Type:
      - application/json; charset=utf-8
      Etag:
      - W/"31a46-q5bzMcG1O146Od75LaAM9ICFYbY"
      Vary:
      - Accept-Encoding
      Transfer-Encoding:
      - chunked
      Via:
      - 1.1 vegur
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        {
  "games": [
    {
      "id": "y1Umv3Jc3w",
      "handle": "the-isle-of-cats",
      "url": "https://www.boardgameatlas.com/game/y1Umv3Jc3w/the-isle-of-cats",
      "bga_edit_url": "https://www.boardgameatlas.com/game/y1Umv3Jc3w/edit",
      "template_url": "/products/listing?objectId=y1Umv3Jc3w&product_line=Board Games&type=product",
      "name": "The Isle of Cats",
      "price": "34.59",
      "price_ca": "44.95",
      "price_uk": "0.00",
      "price_au": "64.95",
      "msrp": 50,
      "msrps": [
        {
          "country": "US",
          "price": 50
        }
      ],
      "discount": "0.31",
      "year_published": 2019,
      "min_players": 1,
      "max_players": 4,
      "player_counts": [
        1,
        2,
        3,
        4
      ],
      "min_playtime": 60,
      "max_playtime": 90,
      "min_age": 8,
      "description": "<p>The Isle of Cats is a competitive, medium-weight, card-drafting, polyomino cat-placement board game for 1-4 players (6 with expansions).</p>\r\n<p>You are citizens of Squalls End on a rescue mission to The Isle of Cats and must rescue as many cats as possible before the evil Lord Vesh arrives. Each cat is represented by a unique tile and belongs to a family, you must find a way to make them all fit on your boat while keeping families together.</p>\r\n<p>You will also need to manage resources as you:</p>\r\n<ul>\r\n<li>Explore the island (by drafting cards)</li>\r\n<li>Rescue cats</li>\r\n<li>Find treasures</li>\r\n<li>Befriend Oshax</li>\r\n<li>Study ancient lessons</li>\r\n</ul>\r\n<p>Each lesson you collect will give you another personal way of scoring points, and there are 38 unique lessons available.</p>\r\n<p>Complete lessons, fill your boat, and keep cat families together to score points, the winner will be the player with the most points after five rounds.</p>\r\n<p><em>—description from the designer</em></p>",
      "commentary": "",
      "faq": "",
      "thumb_url": "https://s3-us-west-1.amazonaws.com/5cc.images/games/uploaded/1629324441268.jpg",
      "image_url": "https://s3-us-west-1.amazonaws.com/5cc.images/games/uploaded/1629324441268.jpg",
      "matches_specs": null,
      "specs": [],
      "mechanics": [
        {
          "id": "iWODHwRGuU",
          "url": "https://www.boardgameatlas.com/mechanic/iWODHwRGuU/undefined"
        },
        {
          "id": "9YdRn9J9oZ",
          "url": "https://www.boardgameatlas.com/mechanic/9YdRn9J9oZ/undefined"
        },
        {
          "id": "lA3KUtVFCy",
          "url": "https://www.boardgameatlas.com/mechanic/lA3KUtVFCy/undefined"
        },
        {
          "id": "L8QFIjNObL",
          "url": "https://www.boardgameatlas.com/mechanic/L8QFIjNObL/undefined"
        },
        {
          "id": "8PN2HE86wg",
          "url": "https://www.boardgameatlas.com/mechanic/8PN2HE86wg/undefined"
        }
      ],
      "categories": [
        {
          "id": "MWoxgHrOJD",
          "url": "https://www.boardgameatlas.com/category/MWoxgHrOJD/undefined"
        },
        {
          "id": "7rV11PKqME",
          "url": "https://www.boardgameatlas.com/category/7rV11PKqME/undefined"
        },
        {
          "id": "WVMOS3s2pb",
          "url": "https://www.boardgameatlas.com/category/WVMOS3s2pb/undefined"
        },
        {
          "id": "VzyslQJGrG",
          "url": "https://www.boardgameatlas.com/category/VzyslQJGrG/undefined"
        }
      ],
      "publishers": [
        {
          "id": "oZcHBJkmoL",
          "num_games": null,
          "score": 9999999,
          "game": {},
          "url": "https://www.boardgameatlas.com/publisher/oZcHBJkmoL/undefined",
          "images": {
            "thumb": null,
            "small": null,
            "medium": null,
            "large": null,
            "original": null
          }
        }
      ],
      "designers": [
        {
          "id": "CnsusME10T",
          "num_games": null,
          "score": 9999999,
          "game": {},
          "url": "https://www.boardgameatlas.com/designer/CnsusME10T/undefined",
          "images": {
            "thumb": null,
            "small": null,
            "medium": null,
            "large": null,
            "original": null
          }
        }
      ],
      "primary_publisher": {
        "id": "oZcHBJkmoL",
        "name": "The City of Games",
        "url": "https://www.boardgameatlas.com/publisher/oZcHBJkmoL/the-city-of-games"
      },
      "primary_designer": {
        "id": "CnsusME10T",
        "name": "Frank West",
        "url": "https://www.boardgameatlas.com/designer/CnsusME10T/frank-west"
      },
      "developers": [],
      "related_to": [],
      "related_as": [],
      "artists": [
        "Dragolisco",
        "Frank West"
      ],
      "names": [],
      "rules_url": "http://thecityofkings.com/games/the-isle-of-cats/how-to-play/",
      "official_url": "http://www.thecityofkings.com/?utm_source=boardgameatlas.com&utm_medium=search&utm_campaign=bga_ads",
      "sell_sheet_url": null,
      "store_images_url": null,
      "comment_count": 0,
      "num_user_ratings": 126,
      "average_user_rating": 4.095523809523811,
      "historical_low_prices": [
        {
          "country": "AU",
          "date": "2022-01-19T22:24:48.520Z",
          "price": 64.95,
          "isLow": false
        },
        {
          "country": "CA",
          "date": "2022-02-13T03:28:44.341Z",
          "price": 44.95,
          "isLow": false
        },
        {
          "country": "UK",
          "date": "2022-03-20T03:05:22.112Z",
          "price": 35.99,
          "isLow": false
        },
        {
          "country": "US",
          "date": "2023-04-02T05:06:13.089Z",
          "price": 34.59,
          "isLow": false
        }
      ],
      "active": true,
      "num_user_complexity_votes": 4,
      "average_learning_complexity": 2.5,
      "average_strategy_complexity": 3,
      "visits": 12487,
      "lists": 1056,
      "mentions": 60,
      "links": 2,
      "plays": 1991,
      "rank": 161,
      "type": "game",
      "upc": "5060716750007",
      "num_distributors": 1,
      "trending_rank": 0,
      "listing_clicks": 5,
      "is_historical_low": false,
      "skus": [
        "TCOK601",
        "TCOK601-DD",
        "TCOK601-DING",
        "5060716750007",
        "TCOK601-DDD",
        "TIC01",
        "98366",
        "72554",
        "+3+5060716750007",
        "2148974260",
        "45708 #1074 / 1075",
        "93316:180214",
        "BG-000181-001",
        "ISLECATS_SH",
        "KOB9061",
        "Ballarat|02dcd191-ae3f-11ea-f336-486a879fa149",
        "CTT21648",
        "200339261"
      ],
      "sku_objects": [
        {
          "name": "Boarding School Games",
          "sku": "TCOK601"
        },
        {
          "name": "Boardlandia",
          "sku": "TCOK601-DD"
        },
        {
          "name": "Game Nerdz",
          "sku": "TCOK601-DING"
        },
        {
          "name": "LVLUP GAMES",
          "sku": "5060716750007"
        },
        {
          "name": "Boardlandia",
          "sku": "TCOK601-DDD"
        },
        {
          "name": "Advent Games",
          "sku": "TIC01"
        },
        {
          "name": "Game Shack Inc.",
          "sku": "98366"
        },
        {
          "name": "Hanabee",
          "sku": "72554"
        },
        {
          "name": "Boardgame Master",
          "sku": "+3+5060716750007"
        },
        {
          "name": "Noble Knight Games",
          "sku": "2148974260"
        },
        {
          "name": "Funagain Games",
          "sku": "45708 #1074 / 1075"
        },
        {
          "name": "BoardGameCo",
          "sku": "93316:180214"
        },
        {
          "name": "Meeples and Milkshakes",
          "sku": "BG-000181-001"
        },
        {
          "name": "Gameology",
          "sku": "ISLECATS_SH"
        },
        {
          "name": "Philibert",
          "sku": "KOB9061"
        },
        {
          "name": "Guf",
          "sku": "Ballarat|02dcd191-ae3f-11ea-f336-486a879fa149"
        },
        {
          "name": "Card Haus",
          "sku": "CTT21648"
        },
        {
          "name": "Bed Bath and Beyond Inc.",
          "sku": "200339261"
        }
      ],
      "edit_url": "/products/listing-edit?objectId=y1Umv3Jc3w&product_line=Board Games&type=product",
      "players": "1-4",
      "playtime": "60-90",
      "msrp_text": "$50.00",
      "price_text": "$34.59",
      "tags": [
        "The Isle of Cats",
        "Isle of Cats",
        "Isle of Cats Board Game Bundle",
        "Isle of Cats - Ding & Dent",
        "The City of Games The Isle of Cats, Multi-Colored",
        "Isle of Cats The",
        "Isle of Cats The Kickstarter Edition",
        "The Isle of Cats (Minor Damage)",
        "THE ISLE OF CATS",
        "The Isle Of Cats",
        "Isle Of Cats",
        "The Isle of Cats Game",
        "The Isle of Cats - Dent and Ding (Major Damage)"
      ],
      "images": {
        "thumb": "https://d2k4q26owzy373.cloudfront.net/40x40/games/uploaded/1629324441268.jpg",
        "small": "https://d2k4q26owzy373.cloudfront.net/150x150/games/uploaded/1629324441268.jpg",
        "medium": "https://d2k4q26owzy373.cloudfront.net/350x350/games/uploaded/1629324441268.jpg",
        "large": "https://d2k4q26owzy373.cloudfront.net/700x700/games/uploaded/1629324441268.jpg",
        "original": "https://s3-us-west-1.amazonaws.com/5cc.images/games/uploaded/1629324441268.jpg"
      },
      "description_preview": " The Isle of Cats is a competitive, medium-weight, card-drafting, polyomino cat-placement board game for 1-4 players (6 with expansions). \r\n You are citizens of Squalls End on a rescue mission to The Isle of Cats and must rescue as many cats as possible before the evil Lord Vesh arrives. Each cat is represented by a unique tile and belongs to a family, you must find a way to make them all fit on your boat while keeping families together. \r\n You will also need to manage resources as you: \r\n \r\n Explore the island (by drafting cards) \r\n Rescue cats \r\n Find treasures \r\n Befriend Oshax \r\n Study ancient lessons \r\n \r\n Each lesson you collect will give you another personal way of scoring points, and there are 38 unique lessons available. \r\n Complete lessons, fill your boat, and keep cat families together to score points, the winner will be the player with the most points after five rounds. \r\n  —description from the designer  "
    },
    {
      "id": "wuAWDG8K9t",
      "handle": "cat-lady",
      "url": "https://www.boardgameatlas.com/game/wuAWDG8K9t/cat-lady",
      "bga_edit_url": "https://www.boardgameatlas.com/game/wuAWDG8K9t/edit",
      "template_url": "/products/listing?objectId=wuAWDG8K9t&product_line=Board Games&type=product",
      "name": "Cat Lady",
      "price": "19.09",
      "price_ca": "19.99",
      "price_uk": "0.00",
      "price_au": "35.95",
      "msrp": 24.99,
      "msrps": [
        {
          "country": "UK",
          "price": 24.99
        },
        {
          "country": "US",
          "price": 24.99
        }
      ],
      "discount": "0.24",
      "year_published": 2017,
      "min_players": 2,
      "max_players": 4,
      "player_counts": [
        2,
        3,
        4
      ],
      "min_playtime": 30,
      "max_playtime": 45,
      "min_age": 14,
      "description": "<p>The Purrfect Game For Cat Lovers and Gamers Alike! Players are cat ladies, part of an elite group of people including Marie Antoinette and Ernest Hemingway. During the game, you and your fellow cat ladies will draft cards three at a time, collecting toys, food, catnip, costumes, and of course lovable cats. But watch out! Make sure you have enough food for all of your feline friends or your hungry cats will subtract points from your score. The player with the highest total victory points wins the game!</p>",
      "commentary": "",
      "faq": "",
      "thumb_url": "https://s3-us-west-1.amazonaws.com/5cc.images/games/uploaded/1559254269010-51D83XEh7BL.jpg",
      "image_url": "https://s3-us-west-1.amazonaws.com/5cc.images/games/uploaded/1559254269010-51D83XEh7BL.jpg",
      "matches_specs": null,
      "specs": [],
      "mechanics": [
        {
          "id": "iWODHwRGuU",
          "url": "https://www.boardgameatlas.com/mechanic/iWODHwRGuU/undefined"
        },
        {
          "id": "Rt6V388y6M",
          "url": "https://www.boardgameatlas.com/mechanic/Rt6V388y6M/undefined"
        },
        {
          "id": "lA3KUtVFCy",
          "url": "https://www.boardgameatlas.com/mechanic/lA3KUtVFCy/undefined"
        },
        {
          "id": "Ur6gNAsERj",
          "url": "https://www.boardgameatlas.com/mechanic/Ur6gNAsERj/undefined"
        }
      ],
      "categories": [
        {
          "id": "MWoxgHrOJD",
          "url": "https://www.boardgameatlas.com/category/MWoxgHrOJD/undefined"
        },
        {
          "id": "eX8uuNlQkQ",
          "url": "https://www.boardgameatlas.com/category/eX8uuNlQkQ/undefined"
        },
        {
          "id": "YrDuNj8lvr",
          "url": "https://www.boardgameatlas.com/category/YrDuNj8lvr/undefined"
        }
      ],
      "publishers": [
        {
          "id": "m4T08lQftL",
          "num_games": null,
          "score": 9999999,
          "game": {},
          "url": "https://www.boardgameatlas.com/publisher/m4T08lQftL/undefined",
          "images": {
            "thumb": null,
            "small": null,
            "medium": null,
            "large": null,
            "original": null
          }
        }
      ],
      "designers": [
        {
          "id": "ZFqEl9AFoc",
          "num_games": null,
          "score": 9999999,
          "game": {},
          "url": "https://www.boardgameatlas.com/designer/ZFqEl9AFoc/undefined",
          "images": {
            "thumb": null,
            "small": null,
            "medium": null,
            "large": null,
            "original": null
          }
        }
      ],
      "primary_publisher": {
        "id": "m4T08lQftL",
        "name": "Alderac Entertainment Group",
        "url": "https://www.boardgameatlas.com/publisher/m4T08lQftL/alderac-entertainment-group"
      },
      "primary_designer": {
        "id": "ZFqEl9AFoc",
        "name": "Josh Wood",
        "url": "https://www.boardgameatlas.com/designer/ZFqEl9AFoc/josh-wood"
      },
      "developers": [],
      "related_to": [],
      "related_as": [],
      "artists": [
        "Josh Wood"
      ],
      "names": [],
      "rules_url": null,
      "amazon_rank": 35786,
      "cs_rating": 4,
      "official_url": "https://www.alderac.com/cat-lady/?utm_source=boardgameatlas.com&utm_medium=search&utm_campaign=bga_ads",
      "comment_count": 0,
      "num_user_ratings": 85,
      "average_user_rating": 3.3223529411764723,
      "weight_amount": 0.86,
      "weight_units": "lbs",
      "size_height": 5.75,
      "size_depth": 7.88,
      "size_units": "inches",
      "historical_low_prices": [
        {
          "country": "AU",
          "date": "2022-01-07T22:41:16.782Z",
          "price": 34.14,
          "isLow": true
        },
        {
          "country": "CA",
          "date": "2022-01-19T22:27:21.001Z",
          "price": 21.05,
          "isLow": false
        },
        {
          "country": "UK",
          "date": "2022-12-06T14:46:06.434Z",
          "price": 19.87,
          "isLow": false
        },
        {
          "country": "US",
          "date": "2023-04-02T11:49:41.974Z",
          "price": 19.09,
          "isLow": false
        }
      ],
      "active": true,
      "num_user_complexity_votes": 2,
      "average_learning_complexity": 1.5,
      "average_strategy_complexity": 2,
      "visits": 1699,
      "lists": 312,
      "mentions": 11,
      "links": 1,
      "plays": 758,
      "rank": 663,
      "type": "game",
      "upc": "729220058850",
      "num_distributors": 3,
      "trending_rank": 0,
      "listing_clicks": 0,
      "is_historical_low": false,
      "skus": [
        "AEG 5885",
        "AEG5885",
        "729220058850",
        "AEG-BG-CAT",
        "0729220058850",
        "AEG05885",
        "6422",
        "93438",
        "42764",
        "2148713820",
        "43925 #0604",
        "89467:98102",
        "BG-000423-001",
        "T0433_CATLADY_SS",
        "96622"
      ],
      "sku_objects": [
        {
          "name": "Boarding School Games",
          "sku": "AEG 5885"
        },
        {
          "name": "Card Haus",
          "sku": "AEG5885"
        },
        {
          "name": "401 Games",
          "sku": "729220058850"
        },
        {
          "name": "Board Gaming With Education",
          "sku": "AEG-BG-CAT"
        },
        {
          "name": "Imaginaire Shop",
          "sku": "0729220058850"
        },
        {
          "name": "Apt to Game",
          "sku": "AEG05885"
        },
        {
          "name": "Dragon’s Den Games",
          "sku": "6422"
        },
        {
          "name": "Game Shack Inc.",
          "sku": "93438"
        },
        {
          "name": "Hanabee",
          "sku": "42764"
        },
        {
          "name": "Noble Knight Games",
          "sku": "2148713820"
        },
        {
          "name": "Funagain Games",
          "sku": "43925 #0604"
        },
        {
          "name": "BoardGameCo",
          "sku": "89467:98102"
        },
        {
          "name": "Meeples and Milkshakes",
          "sku": "BG-000423-001"
        },
        {
          "name": "Gameology",
          "sku": "T0433_CATLADY_SS"
        },
        {
          "name": "Game Shack Inc.",
          "sku": "96622"
        }
      ],
      "edit_url": "/products/listing-edit?objectId=wuAWDG8K9t&product_line=Board Games&type=product",
      "players": "2-4",
      "playtime": "30-45",
      "msrp_text": "$24.99",
      "price_text": "$19.09",
      "tags": [
        "Kočičí klub",
        "トルネコ",
        "Cat Lady",
        "CAT LADY",
        "CAT LADY BASE GAME ENGLISH"
      ],
      "images": {
        "thumb": "https://d2k4q26owzy373.cloudfront.net/40x40/games/uploaded/1559254269010-51D83XEh7BL.jpg",
        "small": "https://d2k4q26owzy373.cloudfront.net/150x150/games/uploaded/1559254269010-51D83XEh7BL.jpg",
        "medium": "https://d2k4q26owzy373.cloudfront.net/350x350/games/uploaded/1559254269010-51D83XEh7BL.jpg",
        "large": "https://d2k4q26owzy373.cloudfront.net/700x700/games/uploaded/1559254269010-51D83XEh7BL.jpg",
        "original": "https://s3-us-west-1.amazonaws.com/5cc.images/games/uploaded/1559254269010-51D83XEh7BL.jpg"
      },
      "description_preview": " The Purrfect Game For Cat Lovers and Gamers Alike! Players are cat ladies, part of an elite group of people including Marie Antoinette and Ernest Hemingway. During the game, you and your fellow cat ladies will draft cards three at a time, collecting toys, food, catnip, costumes, and of course lovable cats. But watch out! Make sure you have enough food for all of your feline friends or your hungry cats will subtract points from your score. The player with the highest total victory points wins the game! "
    },
    {
      "id": "YadUC1YFfW",
      "handle": "dice-hospital",
      "url": "https://www.boardgameatlas.com/game/YadUC1YFfW/dice-hospital",
      "bga_edit_url": "https://www.boardgameatlas.com/game/YadUC1YFfW/edit",
      "template_url": "/products/listing?objectId=YadUC1YFfW&product_line=Board Games&type=product",
      "name": "Dice Hospital",
      "price": "39.39",
      "price_ca": "35.99",
      "price_uk": "40.50",
      "price_au": "82.95",
      "msrp": 54.99,
      "msrps": [
        {
          "country": "CA",
          "price": 0
        },
        {
          "country": "UK",
          "price": 0
        },
        {
          "country": "US",
          "price": 54.99
        }
      ],
      "discount": "0.28",
      "year_published": 2018,
      "min_players": 1,
      "max_players": 4,
      "player_counts": [
        1,
        2,
        3,
        4
      ],
      "min_playtime": 45,
      "max_playtime": 90,
      "min_age": 10,
      "description": "<p>In Dice Hospital, players are tasked with running a local hospital. Each round you'll be admitting new patients, hiring specialists, building new departments, and treating as many incoming patients as you can.</p>\r\n<p>Players use their hospital staff to treat patients on their personal hospital player boards. However, players may also call in specialist staff to react to certain situations that arise to score more points with the authorities!</p>\r\n<p>The game uses worker placement mechanics for the staff, dice as the patients where low scores indicate low health and a personal player board of actions to treat patients. The player with the highest reputation wins the game!</p>",
      "commentary": "",
      "faq": "",
      "thumb_url": "https://s3-us-west-1.amazonaws.com/5cc.images/games/uploaded/1538195563756",
      "image_url": "https://s3-us-west-1.amazonaws.com/5cc.images/games/uploaded/1538195563756",
      "matches_specs": null,
      "specs": [],
      "mechanics": [
        {
          "id": "oeg6wN9Eoc",
          "url": "https://www.boardgameatlas.com/mechanic/oeg6wN9Eoc/undefined"
        },
        {
          "id": "R0bGq4cAl4",
          "url": "https://www.boardgameatlas.com/mechanic/R0bGq4cAl4/undefined"
        },
        {
          "id": "wV5peB05xs",
          "url": "https://www.boardgameatlas.com/mechanic/wV5peB05xs/undefined"
        },
        {
          "id": "yu3eas6v7A",
          "url": "https://www.boardgameatlas.com/mechanic/yu3eas6v7A/undefined"
        }
      ],
      "categories": [
        {
          "id": "mavSOM8vjH",
          "url": "https://www.boardgameatlas.com/category/mavSOM8vjH/undefined"
        },
        {
          "id": "AeWXMxbm91",
          "url": "https://www.boardgameatlas.com/category/AeWXMxbm91/undefined"
        }
      ],
      "publishers": [
        {
          "id": "kYDwJgCh9D",
          "num_games": null,
          "score": 9999999,
          "game": {},
          "url": "https://www.boardgameatlas.com/publisher/kYDwJgCh9D/undefined",
          "images": {
            "thumb": null,
            "small": null,
            "medium": null,
            "large": null,
            "original": null
          }
        }
      ],
      "designers": [
        {
          "id": "TubJgjpZa7",
          "num_games": null,
          "score": 9999999,
          "game": {},
          "url": "https://www.boardgameatlas.com/designer/TubJgjpZa7/undefined",
          "images": {
            "thumb": null,
            "small": null,
            "medium": null,
            "large": null,
            "original": null
          }
        },
        {
          "id": "kmOXg137IL",
          "num_games": null,
          "score": 9999999,
          "game": {},
          "url": "https://www.boardgameatlas.com/designer/kmOXg137IL/undefined",
          "images": {
            "thumb": null,
            "small": null,
            "medium": null,
            "large": null,
            "original": null
          }
        }
      ],
      "primary_publisher": {
        "id": "kYDwJgCh9D",
        "name": "Alley Cat Games",
        "url": "https://www.boardgameatlas.com/publisher/kYDwJgCh9D/alley-cat-games"
      },
      "primary_designer": {
        "id": "TubJgjpZa7",
        "name": "Stan Kordonskiy",
        "url": "https://www.boardgameatlas.com/designer/TubJgjpZa7/stan-kordonskiy"
      },
      "developers": [],
      "related_to": [],
      "related_as": [],
      "artists": [
        "Sebastián Koziner",
        "Sabrina Miramon"
      ],
      "names": [],
      "rules_url": null,
      "official_url": "https://www.alleycatgames.com/dice-hospital?utm_source=boardgameatlas.com&utm_medium=search&utm_campaign=bga_ads",
      "comment_count": 0,
      "num_user_ratings": 61,
      "average_user_rating": 3.5038114754098357,
      "size_height": 11.81,
      "size_depth": 2.56,
      "size_units": "inches",
      "historical_low_prices": [
        {
          "country": "AU",
          "date": "2021-04-07T17:47:35.365Z",
          "price": 82.95,
          "isLow": true
        },
        {
          "country": "CA",
          "date": "2022-10-20T03:17:01.364Z",
          "price": 35.99,
          "isLow": false
        },
        {
          "country": "UK",
          "date": "2023-01-15T16:48:53.251Z",
          "price": 40.5,
          "isLow": false
        },
        {
          "country": "US",
          "date": "2023-03-29T15:49:05.133Z",
          "price": 39.79,
          "isLow": false
        }
      ],
      "active": true,
      "num_user_complexity_votes": 0,
      "average_learning_complexity": 0,
      "average_strategy_complexity": 0,
      "visits": 2193,
      "lists": 334,
      "mentions": 9,
      "links": 8,
      "plays": 635,
      "rank": 749,
      "type": "game",
      "sku": "ACG005",
      "upc": "604565054616",
      "num_distributors": 3,
      "trending_rank": 0,
      "listing_clicks": 0,
      "is_historical_low": false,
      "skus": [
        "ACG 005",
        "ACG005",
        "604565054616",
        "0604565054623",
        "BG-001777-001",
        "63663",
        "DIC03",
        "15446295871539",
        "45720 #0621",
        "89159:97630",
        "ACG006",
        "ALDICEHOS01",
        "MDGDI01846",
        "ACG005DD",
        "2148963999",
        "2149278303",
        "ACG-DICEHOS01-EN",
        "Ballarat|02dcd191-ae3f-11e8-ed44-fc313b7373a8",
        "3665361015161"
      ],
      "sku_objects": [
        {
          "name": "Boarding School Games",
          "sku": "ACG 005"
        },
        {
          "name": "Gumnut",
          "sku": "ACG005"
        },
        {
          "name": "401 Games",
          "sku": "604565054616"
        },
        {
          "name": "401 Games",
          "sku": "0604565054623"
        },
        {
          "name": "Meeples and Milkshakes",
          "sku": "BG-001777-001"
        },
        {
          "name": "Hanabee",
          "sku": "63663"
        },
        {
          "name": "Advent Games",
          "sku": "DIC03"
        },
        {
          "name": "BoardGameBliss Inc",
          "sku": "15446295871539"
        },
        {
          "name": "Funagain Games",
          "sku": "45720 #0621"
        },
        {
          "name": "BoardGameCo",
          "sku": "89159:97630"
        },
        {
          "name": "BoardGameBliss Inc",
          "sku": "ACG006"
        },
        {
          "name": "Wayland Games",
          "sku": "ALDICEHOS01"
        },
        {
          "name": "Mr. Dice Guy",
          "sku": "MDGDI01846"
        },
        {
          "name": "Card Haus",
          "sku": "ACG005DD"
        },
        {
          "name": "Noble Knight Games",
          "sku": "2148963999"
        },
        {
          "name": "Noble Knight Games",
          "sku": "2149278303"
        },
        {
          "name": "Philibert",
          "sku": "ACG-DICEHOS01-EN"
        },
        {
          "name": "Guf",
          "sku": "Ballarat|02dcd191-ae3f-11e8-ed44-fc313b7373a8"
        },
        {
          "name": "Imaginaire Shop",
          "sku": "3665361015161"
        }
      ],
      "edit_url": "/products/listing-edit?objectId=YadUC1YFfW&product_line=Board Games&type=product",
      "players": "1-4",
      "playtime": "45-90",
      "msrp_text": "$54.99",
      "price_text": "$39.39",
      "tags": [
        "Dice Hospital Alley Cat Games",
        "Dice Hospital FR",
        "Dice Hospital board game",
        "Dice Hospital with Deluxe Edition Addon Box",
        "Dice Hospital (Dinged/Dented - 20% off at checkout)",
        "Dice Hospital"
      ],
      "images": {
        "thumb": "https://d2k4q26owzy373.cloudfront.net/40x40/games/uploaded/1538195563756",
        "small": "https://d2k4q26owzy373.cloudfront.net/150x150/games/uploaded/1538195563756",
        "medium": "https://d2k4q26owzy373.cloudfront.net/350x350/games/uploaded/1538195563756",
        "large": "https://d2k4q26owzy373.cloudfront.net/700x700/games/uploaded/1538195563756",
        "original": "https://s3-us-west-1.amazonaws.com/5cc.images/games/uploaded/1538195563756"
      },
      "description_preview": " In Dice Hospital, players are tasked with running a local hospital. Each round you'll be admitting new patients, hiring specialists, building new departments, and treating as many incoming patients as you can. \r\n Players use their hospital staff to treat patients on their personal hospital player boards. However, players may also call in specialist staff to react to certain situations that arise to score more points with the authorities! \r\n The game uses worker placement mechanics for the staff, dice as the patients where low scores indicate low health and a personal player board of actions to treat patients. The player with the highest reputation wins the game! "
    },
    {
      "id": "KdXzgXax1k",
      "handle": "felicity-the-cat-in-the-sack",
      "url": "https://www.boardgameatlas.com/game/KdXzgXax1k/felicity-the-cat-in-the-sack",
      "bga_edit_url": "https://www.boardgameatlas.com/game/KdXzgXax1k/edit",
      "template_url": "/products/listing?objectId=KdXzgXax1k&product_line=Board Games&type=product",
      "name": "Felicity: The Cat in the Sack",
      "price": "0.00",
      "price_ca": "19.49",
      "price_uk": "0.00",
      "price_au": "33.96",
      "msrp": 19.95,
      "msrps": [
        {
          "country": "US",
          "price": 19.95
        }
      ],
      "discount": "0.00",
      "year_published": 2007,
      "min_players": 3,
      "max_players": 5,
      "player_counts": [
        3,
        4,
        5
      ],
      "min_playtime": 20,
      "max_playtime": 45,
      "min_age": 8,
      "description": "Cats have very different personalities: Some adorable and sweet, and some...not so much. Players try to grab the best cats, sometimes using a dog to chase away unwanted cats, but too many dogs are bad as they may just chase each other! With their mice, the players attempt to grab the famous Felicity: The Cat In The Sack. In the sack, there are both good and bad cats. Each player can also put a dog or rabbit into the sack instead of a cat, allowing players to bluff one another. At the end of the game, all good cats and mice count as positive points, but bad cats count against you! This is a clever auction game with many interesting decisions.",
      "commentary": "",
      "faq": "",
      "thumb_url": "https://s3-us-west-1.amazonaws.com/5cc.images/games/uploaded/1559253935518-51RcdgRXrbL.jpg",
      "image_url": "https://s3-us-west-1.amazonaws.com/5cc.images/games/uploaded/1559253935518-51RcdgRXrbL.jpg",
      "matches_specs": null,
      "specs": [],
      "mechanics": [
        {
          "id": "AZxlPpi5oq",
          "url": "https://www.boardgameatlas.com/mechanic/AZxlPpi5oq/undefined"
        },
        {
          "id": "3tuJiW3pps",
          "url": "https://www.boardgameatlas.com/mechanic/3tuJiW3pps/undefined"
        },
        {
          "id": "RwgEONzIzc",
          "url": "https://www.boardgameatlas.com/mechanic/RwgEONzIzc/undefined"
        }
      ],
      "categories": [],
      "publishers": [
        {
          "id": "fp9ajXmUFW",
          "num_games": null,
          "score": 9999999,
          "game": {},
          "url": "https://www.boardgameatlas.com/publisher/fp9ajXmUFW/undefined",
          "images": {
            "thumb": null,
            "small": null,
            "medium": null,
            "large": null,
            "original": null
          }
        }
      ],
      "designers": [
        {
          "id": "Q4V5GDPbaT",
          "num_games": null,
          "score": 9999999,
          "game": {},
          "url": "https://www.boardgameatlas.com/designer/Q4V5GDPbaT/undefined",
          "images": {
            "thumb": null,
            "small": null,
            "medium": null,
            "large": null,
            "original": null
          }
        }
      ],
      "primary_publisher": {
        "name": "Stronghold Games",
        "id": "fp9ajXmUFW",
        "url": "https://www.boardgameatlas.com/publisher/fp9ajXmUFW/stronghold-games"
      },
      "primary_designer": {
        "name": "Friedemann Friese",
        "id": "Q4V5GDPbaT",
        "url": "https://www.boardgameatlas.com/designer/Q4V5GDPbaT/friedemann-friese"
      },
      "developers": [],
      "related_to": [],
      "related_as": [],
      "artists": [
        "Lars-Arne \"Maura\" Kalusky"
      ],
      "names": [
        "Félix: El Gato Encerrado",
        "Felix: Il Gatto nel Sacco",
        "Felix: Kočka v pytli",
        "Felix: The Cat in the Sack",
        "Felix: Um Saco de Gatos",
        "Filou: Die Katze im Sack",
        "Filou: Le chat dans le sac",
        "Minoes: Kat in de zak",
        "Φήλιξ",
        "菲力袋中貓",
        "袋の中の猫フィロー",
        "袋中菲力貓"
      ],
      "rules_url": null,
      "amazon_rank": 833930,
      "official_url": null,
      "comment_count": 0,
      "num_user_ratings": 39,
      "average_user_rating": 3.152564102564103,
      "historical_low_prices": [
        {
          "country": "US",
          "date": "2021-03-16T17:48:04.930Z",
          "price": 19.95,
          "isLow": false
        },
        {
          "country": "AU",
          "date": "2022-01-04T02:13:47.158Z",
          "price": 30.57,
          "isLow": false
        },
        {
          "country": "CA",
          "date": "2022-01-12T22:31:55.051Z",
          "price": 21.99,
          "isLow": false
        }
      ],
      "active": true,
      "num_user_complexity_votes": 0,
      "average_learning_complexity": 0,
      "average_strategy_complexity": 0,
      "visits": 335,
      "lists": 116,
      "mentions": 0,
      "links": 0,
      "plays": 133,
      "rank": 1553,
      "type": "game",
      "num_distributors": 0,
      "trending_rank": 0,
      "listing_clicks": 0,
      "is_historical_low": false,
      "skus": [
        "SG6013",
        "SG-6013",
        "42667",
        "14115:24728",
        "39404169933",
        "653341721808",
        "Warehouse|5d009833afb09eccaefd2912",
        "100626"
      ],
      "sku_objects": [
        {
          "name": "WoodForSheep Hobbies Ltd.",
          "sku": "SG6013"
        },
        {
          "name": "Dragon’s Den Games",
          "sku": "SG-6013"
        },
        {
          "name": "Hanabee",
          "sku": "42667"
        },
        {
          "name": "BoardGameCo",
          "sku": "14115:24728"
        },
        {
          "name": "BoardGameBliss Inc",
          "sku": "39404169933"
        },
        {
          "name": "Game Kastle",
          "sku": "653341721808"
        },
        {
          "name": "Guf",
          "sku": "Warehouse|5d009833afb09eccaefd2912"
        },
        {
          "name": "BoardGameBliss Inc",
          "sku": "100626"
        }
      ],
      "edit_url": "/products/listing-edit?objectId=KdXzgXax1k&product_line=Board Games&type=product",
      "players": "3-5",
      "playtime": "20-45",
      "msrp_text": "$19.95",
      "price_text": "Price: N/A",
      "tags": [
        "Stronghold Games Felicity The Cat in The Sack",
        "Felicity The Cat In The Sack",
        "Felix The Cat in the Sack",
        "Félix: El Gato Encerrado",
        "Felix: Il Gatto nel Sacco",
        "Felix: Kočka v pytli",
        "Felix: The Cat in the Sack",
        "Felix: Um Saco de Gatos",
        "Filou: Die Katze im Sack",
        "Filou: Le chat dans le sac",
        "Minoes: Kat in de zak",
        "Φήλιξ",
        "菲力袋中貓",
        "袋の中の猫フィロー",
        "袋中菲力貓"
      ],
      "images": {
        "thumb": "https://d2k4q26owzy373.cloudfront.net/40x40/games/uploaded/1559253935518-51RcdgRXrbL.jpg",
        "small": "https://d2k4q26owzy373.cloudfront.net/150x150/games/uploaded/1559253935518-51RcdgRXrbL.jpg",
        "medium": "https://d2k4q26owzy373.cloudfront.net/350x350/games/uploaded/1559253935518-51RcdgRXrbL.jpg",
        "large": "https://d2k4q26owzy373.cloudfront.net/700x700/games/uploaded/1559253935518-51RcdgRXrbL.jpg",
        "original": "https://s3-us-west-1.amazonaws.com/5cc.images/games/uploaded/1559253935518-51RcdgRXrbL.jpg"
      },
      "description_preview": "Cats have very different personalities: Some adorable and sweet, and some...not so much. Players try to grab the best cats, sometimes using a dog to chase away unwanted cats, but too many dogs are bad as they may just chase each other! With their mice, the players attempt to grab the famous Felicity: The Cat In The Sack. In the sack, there are both good and bad cats. Each player can also put a dog or rabbit into the sack instead of a cat, allowing players to bluff one another. At the end of the game, all good cats and mice count as positive points, but bad cats count against you! This is a clever auction game with many interesting decisions."
    },
    {
      "id": "2J0UYRU81d",
      "handle": "eat-poop-you-cat",
      "url": "https://www.boardgameatlas.com/game/2J0UYRU81d/eat-poop-you-cat",
      "bga_edit_url": "https://www.boardgameatlas.com/game/2J0UYRU81d/edit",
      "template_url": "/products/listing?objectId=2J0UYRU81d&product_line=Board Games&type=product",
      "name": "Eat Poop You Cat",
      "price": "0.00",
      "price_ca": "8.81",
      "price_uk": "0.00",
      "price_au": "10.17",
      "msrp": 11.19,
      "msrps": [
        {
          "country": "US",
          "price": 11.19
        }
      ],
      "discount": "0.00",
      "year_published": 1984,
      "min_players": 3,
      "max_players": 99,
      "player_counts": [
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10
      ],
      "min_playtime": 20,
      "max_playtime": 20,
      "min_age": 0,
      "description": "",
      "commentary": "",
      "faq": "",
      "thumb_url": "https://s3-us-west-1.amazonaws.com/5cc.images/games/empty+box+thumb.jpg",
      "image_url": "https://s3-us-west-1.amazonaws.com/5cc.images/games/empty+box.jpg",
      "matches_specs": null,
      "specs": [],
      "mechanics": [
        {
          "id": "UHdPUeuqyZ",
          "url": "https://www.boardgameatlas.com/mechanic/UHdPUeuqyZ/undefined"
        }
      ],
      "categories": [],
      "publishers": [
        {
          "id": "hg8a3jxrn9",
          "num_games": null,
          "score": 9999999,
          "game": {},
          "url": "https://www.boardgameatlas.com/publisher/hg8a3jxrn9/undefined",
          "images": {
            "thumb": null,
            "small": null,
            "medium": null,
            "large": null,
            "original": null
          }
        }
      ],
      "designers": [
        {
          "id": "GGjbE1rpsn",
          "num_games": null,
          "score": 9999999,
          "game": {},
          "url": "https://www.boardgameatlas.com/designer/GGjbE1rpsn/undefined",
          "images": {
            "thumb": null,
            "small": null,
            "medium": null,
            "large": null,
            "original": null
          }
        }
      ],
      "primary_publisher": {
        "name": "Public Domain",
        "id": "hg8a3jxrn9",
        "url": "https://www.boardgameatlas.com/publisher/hg8a3jxrn9/public-domain"
      },
      "primary_designer": {
        "name": "(Uncredited)",
        "id": "GGjbE1rpsn",
        "url": "https://www.boardgameatlas.com/designer/GGjbE1rpsn/uncredited"
      },
      "developers": [],
      "related_to": [],
      "related_as": [],
      "artists": [],
      "names": [
        "Birthday Kitten",
        "Broken Picture Telephone",
        "The Caption Game",
        "Don't Cook a Pooping Chicken",
        "EPYC",
        "Evil Potato Moon",
        "Fax Machine",
        "Paper Telephone",
        "Paper Towel Phone",
        "The Sentence Game",
        "Telephone Pictionary",
        "Telepictionary",
        "Visual Telephone",
        "Το έξοχο πτώμα"
      ],
      "rules_url": null,
      "official_url": null,
      "comment_count": 0,
      "num_user_ratings": 25,
      "average_user_rating": 3.44,
      "historical_low_prices": [
        {
          "country": "CA",
          "date": "2021-04-09T15:05:21.469Z",
          "price": 8.81,
          "isLow": false
        },
        {
          "country": "US",
          "date": "2021-12-05T17:25:21.128Z",
          "price": 8.81,
          "isLow": false
        }
      ],
      "active": true,
      "num_user_complexity_votes": 0,
      "average_learning_complexity": 0,
      "average_strategy_complexity": 0,
      "visits": 110,
      "lists": 26,
      "mentions": 0,
      "links": 0,
      "plays": 89,
      "rank": 1910,
      "type": "game",
      "num_distributors": 1,
      "trending_rank": 0,
      "listing_clicks": 0,
      "is_historical_low": false,
      "edit_url": "/products/listing-edit?objectId=2J0UYRU81d&product_line=Board Games&type=product",
      "players": "3-99",
      "playtime": "20",
      "msrp_text": "$11.19",
      "price_text": "Price: N/A",
      "tags": [
        "Birthday Kitten",
        "Broken Picture Telephone",
        "The Caption Game",
        "Don't Cook a Pooping Chicken",
        "EPYC",
        "Evil Potato Moon",
        "Fax Machine",
        "Paper Telephone",
        "Paper Towel Phone",
        "The Sentence Game",
        "Telephone Pictionary",
        "Telepictionary",
        "Visual Telephone",
        "Το έξοχο πτώμα"
      ],
      "images": {
        "thumb": "https://d2k4q26owzy373.cloudfront.net/40x40/games/empty+box.jpg",
        "small": "https://d2k4q26owzy373.cloudfront.net/150x150/games/empty+box.jpg",
        "medium": "https://d2k4q26owzy373.cloudfront.net/350x350/games/empty+box.jpg",
        "large": "https://d2k4q26owzy373.cloudfront.net/700x700/games/empty+box.jpg",
        "original": "https://s3-us-west-1.amazonaws.com/5cc.images/games/empty+box.jpg"
      },
      "description_preview": ""
    },
    {
      "id": "814O18y8PN",
      "handle": "ratatat-cat-collectible-tin",
      "url": "https://www.boardgameatlas.com/game/814O18y8PN/ratatat-cat-collectible-tin",
      "bga_edit_url": "https://www.boardgameatlas.com/game/814O18y8PN/edit",
      "template_url": "/products/listing?objectId=814O18y8PN&product_line=Board Games&type=product",
      "name": "Rat-A-Tat Cat",
      "price": "10.99",
      "price_ca": "14.95",
      "price_uk": "9.63",
      "price_au": "19.99",
      "msrp": 12,
      "msrps": [
        {
          "country": "US",
          "price": 12
        }
      ],
      "discount": "0.08",
      "year_published": 1995,
      "min_players": 2,
      "max_players": 6,
      "player_counts": [
        2,
        3,
        4,
        5,
        6
      ],
      "min_playtime": 10,
      "max_playtime": 10,
      "min_age": 6,
      "description": "Get rid of the rats and go for the cats! Players of all ages will delight over this card game of strategy, memory and a little luck. Win by having your cards add up to the lowest number (a poker face helps). Sneak a peek, draw two or swap for an added twist. Bonus Super Peek lets you spy on opponents' cards! ",
      "commentary": "",
      "faq": "",
      "thumb_url": "https://s3-us-west-1.amazonaws.com/5cc.images/games/uploaded/1559257238738-51S3B2HP2BL.jpg",
      "image_url": "https://s3-us-west-1.amazonaws.com/5cc.images/games/uploaded/1559257238738-51S3B2HP2BL.jpg",
      "matches_specs": null,
      "specs": [],
      "mechanics": [
        {
          "id": "iWODHwRGuU",
          "url": "https://www.boardgameatlas.com/mechanic/iWODHwRGuU/undefined"
        },
        {
          "id": "r6yIFvyXDD",
          "url": "https://www.boardgameatlas.com/mechanic/r6yIFvyXDD/undefined"
        },
        {
          "id": "T8JEFYwoqy",
          "url": "https://www.boardgameatlas.com/mechanic/T8JEFYwoqy/undefined"
        }
      ],
      "categories": [],
      "publishers": [
        {
          "id": "ToCf9WCBmP",
          "num_games": null,
          "score": 9999999,
          "game": {},
          "url": "https://www.boardgameatlas.com/publisher/ToCf9WCBmP/undefined",
          "images": {
            "thumb": null,
            "small": null,
            "medium": null,
            "large": null,
            "original": null
          }
        }
      ],
      "designers": [
        {
          "id": "PzgZlKPekT",
          "num_games": null,
          "score": 9999999,
          "game": {},
          "url": "https://www.boardgameatlas.com/designer/PzgZlKPekT/undefined",
          "images": {
            "thumb": null,
            "small": null,
            "medium": null,
            "large": null,
            "original": null
          }
        },
        {
          "id": "UvrGibH1SD",
          "num_games": null,
          "score": 9999999,
          "game": {},
          "url": "https://www.boardgameatlas.com/designer/UvrGibH1SD/undefined",
          "images": {
            "thumb": null,
            "small": null,
            "medium": null,
            "large": null,
            "original": null
          }
        }
      ],
      "primary_publisher": {
        "name": "Gamewright",
        "id": "ToCf9WCBmP",
        "url": "https://www.boardgameatlas.com/publisher/ToCf9WCBmP/gamewright"
      },
      "primary_designer": {
        "name": "Monty Stambler",
        "id": "PzgZlKPekT",
        "url": "https://www.boardgameatlas.com/designer/PzgZlKPekT/monty-stambler"
      },
      "developers": [],
      "related_to": [],
      "related_as": [],
      "artists": [
        "Björn Pertoft",
        "Roni Shepherd",
        "Markus Wagner"
      ],
      "names": [
        "Banda dei Castori",
        "Beaver gang",
        "Bebru brigāde",
        "Bebrų gauja",
        "Beverbende",
        "Biberbande",
        "Bobří banda",
        "Cтая бобров",
        "Gang de Castors",
        "Koprabande",
        "ΚΑΣΤΟΡΕΣ & ΠΟΝΤΙΚΙΑ",
        "Κάστορες και ποντίκια",
        "Кот-за-Хвост Цап! Делюкс",
        "חתחתול"
      ],
      "rules_url": null,
      "amazon_rank": 782053,
      "official_url": "http://www.gamewright.com/gamewright/index.php?utm_source=boardgameatlas.com&utm_medium=search&utm_campaign=bga_ads",
      "comment_count": 0,
      "num_user_ratings": 27,
      "average_user_rating": 2.955555555555555,
      "historical_low_prices": [
        {
          "country": "AU",
          "date": "2021-02-16T03:07:00.798Z",
          "price": 19.99,
          "isLow": false
        },
        {
          "country": "UK",
          "date": "2021-12-12T09:05:57.634Z",
          "price": 8.99,
          "isLow": false
        },
        {
          "country": "CA",
          "date": "2022-01-04T12:21:56.446Z",
          "price": 14.99,
          "isLow": false
        },
        {
          "country": "US",
          "date": "2023-03-30T22:24:36.918Z",
          "price": 10.99,
          "isLow": false
        }
      ],
      "active": true,
      "num_user_complexity_votes": 0,
      "average_learning_complexity": 0,
      "average_strategy_complexity": 0,
      "visits": 271,
      "lists": 85,
      "mentions": 0,
      "links": 0,
      "plays": 299,
      "rank": 1972,
      "type": "game",
      "upc": "759751002046",
      "num_distributors": 5,
      "trending_rank": 0,
      "listing_clicks": 0,
      "is_historical_low": false,
      "skus": [
        "GWI204",
        "BG-002716-001",
        "2149235396",
        "759751002046",
        "0",
        "GWI5100204",
        "44932 #0154",
        "C0315_RATATAT_CAT_SS",
        "GMW204",
        "GW 204",
        "49129 #0221",
        "51232G",
        "PNA51232G",
        "PNA51232G-DD",
        "4250231729942",
        "4.25E+12"
      ],
      "sku_objects": [
        {
          "name": "Miniature Market",
          "sku": "GWI204"
        },
        {
          "name": "Boarding School Games",
          "sku": "GWI 204"
        },
        {
          "name": "Meeples and Milkshakes",
          "sku": "BG-002716-001"
        },
        {
          "name": "Noble Knight Games",
          "sku": "2149235396"
        },
        {
          "name": "Good Games",
          "sku": "759751002046"
        },
        {
          "name": "Boardgame Master",
          "sku": "0"
        },
        {
          "name": "Gumnut",
          "sku": "GWI5100204"
        },
        {
          "name": "Funagain Games",
          "sku": "44932 #0154"
        },
        {
          "name": "Gameology",
          "sku": "C0315_RATATAT_CAT_SS"
        },
        {
          "name": "Boardlandia",
          "sku": "GMW204"
        },
        {
          "name": "BoardGameBliss Inc",
          "sku": "GW 204"
        },
        {
          "name": "Funagain Games",
          "sku": "49129 #0221"
        },
        {
          "name": "Tabletop Merchant",
          "sku": "51232G"
        },
        {
          "name": "Boardlandia",
          "sku": "PNA51232G"
        },
        {
          "name": "Boardlandia",
          "sku": "PNA51232G-DD"
        },
        {
          "name": "The Board Game Hut",
          "sku": "4250231729942"
        },
        {
          "name": "Advent Games",
          "sku": "4.25E+12"
        }
      ],
      "edit_url": "/products/listing-edit?objectId=814O18y8PN&product_line=Board Games&type=product",
      "players": "2-6",
      "playtime": "10",
      "msrp_text": "$12.00",
      "price_text": "$10.99",
      "tags": [
        "Rat-a-Tat Cat",
        "Rat A Tat Cat 6 Up",
        "Rat A Tat Cat Card Game",
        "Banda dei Castori",
        "Beaver gang",
        "Bebru brigāde",
        "Bebrų gauja",
        "Beverbende",
        "Biberbande",
        "Bobří banda",
        "Cтая бобров",
        "Gang de Castors",
        "Koprabande",
        "ΚΑΣΤΟΡΕΣ & ΠΟΝΤΙΚΙΑ",
        "Κάστορες και ποντίκια",
        "Кот-за-Хвост Цап! Делюкс",
        "חתחתול"
      ],
      "images": {
        "thumb": "https://d2k4q26owzy373.cloudfront.net/40x40/games/uploaded/1559257238738-51S3B2HP2BL.jpg",
        "small": "https://d2k4q26owzy373.cloudfront.net/150x150/games/uploaded/1559257238738-51S3B2HP2BL.jpg",
        "medium": "https://d2k4q26owzy373.cloudfront.net/350x350/games/uploaded/1559257238738-51S3B2HP2BL.jpg",
        "large": "https://d2k4q26owzy373.cloudfront.net/700x700/games/uploaded/1559257238738-51S3B2HP2BL.jpg",
        "original": "https://s3-us-west-1.amazonaws.com/5cc.images/games/uploaded/1559257238738-51S3B2HP2BL.jpg"
      },
      "description_preview": "Get rid of the rats and go for the cats! Players of all ages will delight over this card game of strategy, memory and a little luck. Win by having your cards add up to the lowest number (a poker face helps). Sneak a peek, draw two or swap for an added twist. Bonus Super Peek lets you spy on opponents' cards! "
    },
    {
      "id": "6l3f3hDhd8",
      "handle": "cat-tower",
      "url": "https://www.boardgameatlas.com/game/6l3f3hDhd8/cat-tower",
      "bga_edit_url": "https://www.boardgameatlas.com/game/6l3f3hDhd8/edit",
      "template_url": "/products/listing?objectId=6l3f3hDhd8&product_line=Board Games&type=product",
      "name": "Cat Tower",
      "price": "15.00",
      "price_ca": "11.99",
      "price_uk": "14.07",
      "price_au": "32.99",
      "msrp": 20,
      "msrps": [
        {
          "country": "US",
          "price": 20
        },
        {
          "country": "AU",
          "price": 44.95
        }
      ],
      "discount": "0.25",
      "year_published": 2015,
      "min_players": 2,
      "max_players": 2,
      "player_counts": [
        2
      ],
      "min_playtime": 15,
      "max_playtime": 15,
      "min_age": 6,
      "description": "<p><em>“Meow! It looks so delicious!” Fatty Catty stares, drooling at the dried fish hung high on the shelf. It’s not just Fatty Catty, but all of the cats are attracted to it, wondering how to reach the yummy fish far beyond their leap. Maybe if they stand on each other’s backs they can grab the fish. Let’s help them make a Cat Tower!</em></p>\r\n<p><em>Cat Tower</em> is a papercraft, tower-building, dexterity game starring cats! You and up to five players are tasked with staking unwieldy, lethally cute mousers in various, precarious positions based on the roll of a giant die. The goal is to get rid of your kitty hoard by placing them on the ever-growing Tower of Cats.</p>\r\n<p>But HEADS-UP! One small twitch and cat chaos ensues, forcing the guilty party to add fallen felines to his or her cat pile. Then there are the &quot;Fatty Catty&quot; cards, which equal unforeseen plays. Got it?! Smiles, grimaces, and belly laughs await. Get to stacking!<br /><br /><strong>Contents:</strong><br />42 Stackable Cats</p>",
      "commentary": "",
      "faq": "",
      "thumb_url": "https://s3-us-west-1.amazonaws.com/5cc.images/games/uploaded/1541179128838",
      "image_url": "https://s3-us-west-1.amazonaws.com/5cc.images/games/uploaded/1541179128838",
      "matches_specs": null,
      "specs": [],
      "mechanics": [
        {
          "id": "5kvyChnWuO",
          "url": "https://www.boardgameatlas.com/mechanic/5kvyChnWuO/undefined"
        },
        {
          "id": "R0bGq4cAl4",
          "url": "https://www.boardgameatlas.com/mechanic/R0bGq4cAl4/undefined"
        },
        {
          "id": "QGpSz6qoPw",
          "url": "https://www.boardgameatlas.com/mechanic/QGpSz6qoPw/undefined"
        }
      ],
      "categories": [
        {
          "id": "MWoxgHrOJD",
          "url": "https://www.boardgameatlas.com/category/MWoxgHrOJD/undefined"
        },
        {
          "id": "bKrxqD9mYc",
          "url": "https://www.boardgameatlas.com/category/bKrxqD9mYc/undefined"
        },
        {
          "id": "mavSOM8vjH",
          "url": "https://www.boardgameatlas.com/category/mavSOM8vjH/undefined"
        },
        {
          "id": "7rV11PKqME",
          "url": "https://www.boardgameatlas.com/category/7rV11PKqME/undefined"
        }
      ],
      "publishers": [
        {
          "id": "HAInGFwhnD",
          "num_games": null,
          "score": 9999999,
          "game": {},
          "url": "https://www.boardgameatlas.com/publisher/HAInGFwhnD/undefined",
          "images": {
            "thumb": null,
            "small": null,
            "medium": null,
            "large": null,
            "original": null
          }
        },
        {
          "id": "HRULm3KDzq",
          "num_games": null,
          "score": 9999999,
          "game": {},
          "url": "https://www.boardgameatlas.com/publisher/HRULm3KDzq/undefined",
          "images": {
            "thumb": null,
            "small": null,
            "medium": null,
            "large": null,
            "original": null
          }
        }
      ],
      "designers": [
        {
          "id": "6V6R3qnZWi",
          "num_games": null,
          "score": 9999999,
          "game": {},
          "url": "https://www.boardgameatlas.com/designer/6V6R3qnZWi/undefined",
          "images": {
            "thumb": null,
            "small": null,
            "medium": null,
            "large": null,
            "original": null
          }
        }
      ],
      "primary_publisher": {
        "id": "HAInGFwhnD",
        "name": "IDW Games",
        "url": "https://www.boardgameatlas.com/publisher/HAInGFwhnD/idw-games"
      },
      "primary_designer": {},
      "developers": [],
      "related_to": [],
      "related_as": [],
      "artists": [],
      "names": [],
      "rules_url": null,
      "official_url": null,
      "sell_sheet_url": null,
      "store_images_url": null,
      "comment_count": 0,
      "num_user_ratings": 21,
      "average_user_rating": 2.721428571428571,
      "historical_low_prices": [
        {
          "country": "UK",
          "date": "2021-12-16T00:11:45.166Z",
          "price": 15.99,
          "isLow": false
        },
        {
          "country": "CA",
          "date": "2022-01-06T22:30:04.213Z",
          "price": 19.95,
          "isLow": false
        },
        {
          "country": "AU",
          "date": "2023-03-11T08:20:20.096Z",
          "price": 32.99,
          "isLow": true
        },
        {
          "country": "US",
          "date": "2023-03-19T04:55:20.581Z",
          "price": 15,
          "isLow": false
        }
      ],
      "active": true,
      "num_user_complexity_votes": 0,
      "average_learning_complexity": 0,
      "average_strategy_complexity": 0,
      "visits": 158,
      "lists": 59,
      "mentions": 0,
      "links": 0,
      "plays": 129,
      "rank": 2094,
      "type": "game",
      "sku": "REN2117",
      "upc": "810011721173",
      "num_distributors": 1,
      "trending_rank": 0,
      "listing_clicks": 0,
      "is_historical_low": false,
      "skus": [
        "RGS 02117",
        "810011721173",
        "827714010015",
        "87730",
        "RGS2117",
        "Ballarat|02dcd191-ae3f-11ea-f336-6b4684cc10f3",
        "2148973420",
        "7099:17024",
        "RGS02117"
      ],
      "sku_objects": [
        {
          "name": "Boarding School Games",
          "sku": "RGS 02117"
        },
        {
          "name": "Good Games",
          "sku": "810011721173"
        },
        {
          "name": "Good Games",
          "sku": "827714010015"
        },
        {
          "name": "Game Shack Inc.",
          "sku": "87730"
        },
        {
          "name": "Advent Games",
          "sku": "RGS2117"
        },
        {
          "name": "Guf",
          "sku": "Ballarat|02dcd191-ae3f-11ea-f336-6b4684cc10f3"
        },
        {
          "name": "Noble Knight Games",
          "sku": "2148973420"
        },
        {
          "name": "BoardGameCo",
          "sku": "7099:17024"
        },
        {
          "name": "Miniature Market",
          "sku": "RGS02117"
        }
      ],
      "edit_url": "/products/listing-edit?objectId=6l3f3hDhd8&product_line=Board Games&type=product",
      "players": "2",
      "playtime": "15",
      "msrp_text": "$20.00",
      "price_text": "$15.00",
      "tags": [
        "Diamond Comic Distributors Cat Tower Building Game",
        "Cat Tower"
      ],
      "images": {
        "thumb": "https://d2k4q26owzy373.cloudfront.net/40x40/games/uploaded/1541179128838",
        "small": "https://d2k4q26owzy373.cloudfront.net/150x150/games/uploaded/1541179128838",
        "medium": "https://d2k4q26owzy373.cloudfront.net/350x350/games/uploaded/1541179128838",
        "large": "https://d2k4q26owzy373.cloudfront.net/700x700/games/uploaded/1541179128838",
        "original": "https://s3-us-west-1.amazonaws.com/5cc.images/games/uploaded/1541179128838"
      },
      "description_preview": "  “Meow! It looks so delicious!” Fatty Catty stares, drooling at the dried fish hung high on the shelf. It’s not just Fatty Catty, but all of the cats are attracted to it, wondering how to reach the yummy fish far beyond their leap. Maybe if they stand on each other’s backs they can grab the fish. Let’s help them make a Cat Tower!  \r\n  Cat Tower  is a papercraft, tower-building, dexterity game starring cats! You and up to five players are tasked with staking unwieldy, lethally cute mousers in various, precarious positions based on the roll of a giant die. The goal is to get rid of your kitty hoard by placing them on the ever-growing Tower of Cats. \r\n But HEADS-UP! One small twitch and cat chaos ensues, forcing the guilty party to add fallen felines to his or her cat pile. Then there are the \"Fatty Catty\" cards, which equal unforeseen plays. Got it?! Smiles, grimaces, and belly laughs await. Get to stacking!   Contents:  42 Stackable Cats "
    },
    {
      "id": "pBGkEnPTsn",
      "handle": "cat-in-the-box-deluxe-edition",
      "url": "https://www.boardgameatlas.com/game/pBGkEnPTsn/cat-in-the-box-deluxe-edition",
      "bga_edit_url": "https://www.boardgameatlas.com/game/pBGkEnPTsn/edit",
      "template_url": "/products/listing?objectId=pBGkEnPTsn&product_line=Board Games&type=product",
      "name": "Cat in the Box: Deluxe Edition",
      "price": "0.00",
      "price_ca": "28.95",
      "price_uk": "0.00",
      "price_au": "45.99",
      "msrp": 29.95,
      "msrps": [
        {
          "country": "US",
          "price": 29.95
        }
      ],
      "discount": "0.00",
      "year_published": 2022,
      "min_players": 2,
      "max_players": 5,
      "player_counts": [
        2,
        3,
        4,
        5
      ],
      "min_playtime": 20,
      "max_playtime": 40,
      "min_age": 13,
      "description": "<p><em>Cat in the Box: Deluxe Edition</em> is the quintessential quantum trick-taking card game for 2 - 5 cool cats, where your card's color isn’t defined until you play it! Hypothesize how many tricks you will win, and record your bid. Place tokens on the community research board as you play your hand, and connect large groups of tokens to score even more points. Plan your tricks carefully as you cannot claim the color of a card with the same number that has already been declared. Doing so would be pawsitively catastrophic as you have just created a paradox!  (Notice this does not say pair o' dogs.  Gross.)  </p>",
      "commentary": "",
      "faq": "",
      "thumb_url": "https://s3-us-west-1.amazonaws.com/5cc.images/games/uploaded/1654550166660",
      "image_url": "https://s3-us-west-1.amazonaws.com/5cc.images/games/uploaded/1654550166660",
      "matches_specs": null,
      "specs": [],
      "mechanics": [
        {
          "id": "YlqCkWPY0r",
          "url": "https://www.boardgameatlas.com/mechanic/YlqCkWPY0r/undefined"
        },
        {
          "id": "WPytek5P8l",
          "url": "https://www.boardgameatlas.com/mechanic/WPytek5P8l/undefined"
        },
        {
          "id": "3GSQl800lk",
          "url": "https://www.boardgameatlas.com/mechanic/3GSQl800lk/undefined"
        }
      ],
      "categories": [
        {
          "id": "MWoxgHrOJD",
          "url": "https://www.boardgameatlas.com/category/MWoxgHrOJD/undefined"
        },
        {
          "id": "eX8uuNlQkQ",
          "url": "https://www.boardgameatlas.com/category/eX8uuNlQkQ/undefined"
        }
      ],
      "publishers": [
        {
          "id": "DILYwqowKI",
          "num_games": null,
          "score": 9999999,
          "game": {},
          "url": "https://www.boardgameatlas.com/publisher/DILYwqowKI/undefined",
          "images": {
            "thumb": null,
            "small": null,
            "medium": null,
            "large": null,
            "original": null
          }
        },
        {
          "id": "b33BrKkCsN",
          "num_games": null,
          "score": 9999999,
          "game": {},
          "url": "https://www.boardgameatlas.com/publisher/b33BrKkCsN/undefined",
          "images": {
            "thumb": null,
            "small": null,
            "medium": null,
            "large": null,
            "original": null
          }
        }
      ],
      "designers": [
        {
          "id": "ucAz4dnh4I",
          "num_games": null,
          "score": 9999999,
          "game": {},
          "url": "https://www.boardgameatlas.com/designer/ucAz4dnh4I/undefined",
          "images": {
            "thumb": null,
            "small": null,
            "medium": null,
            "large": null,
            "original": null
          }
        }
      ],
      "primary_publisher": {
        "id": "DILYwqowKI",
        "name": "Bézier Games",
        "url": "https://www.boardgameatlas.com/publisher/DILYwqowKI/bzier-games"
      },
      "primary_designer": {
        "id": "ucAz4dnh4I",
        "name": "Muneyuki Yokouchi",
        "url": "https://www.boardgameatlas.com/designer/ucAz4dnh4I/muneyuki-yokouchi"
      },
      "developers": [],
      "related_to": [],
      "related_as": [],
      "artists": [],
      "names": [],
      "rules_url": "https://cdn.shopify.com/s/files/1/0740/4855/files/CATX_English_Online_Rules.pdf?v=1646343073",
      "official_url": null,
      "sell_sheet_url": null,
      "store_images_url": null,
      "comment_count": 0,
      "num_user_ratings": 1,
      "average_user_rating": 4.5,
      "historical_low_prices": [
        {
          "country": "US",
          "date": "2023-03-23T00:19:11.945Z",
          "price": 19.49,
          "isLow": false
        }
      ],
      "active": true,
      "num_user_complexity_votes": 0,
      "average_learning_complexity": 0,
      "average_strategy_complexity": 0,
      "visits": 2865,
      "lists": 46,
      "mentions": 17,
      "links": 0,
      "plays": 2,
      "rank": 9999999,
      "type": "game",
      "sku": "",
      "upc": "",
      "isbn": "",
      "video_links": [],
      "availability_status": "Available",
      "num_distributors": 1,
      "trending_rank": 29,
      "listing_clicks": 0,
      "is_historical_low": false,
      "skus": [
        "810024460328",
        "CBD01",
        "28471",
        "BEZCATX",
        "BEZCATX-DD"
      ],
      "sku_objects": [
        {
          "name": "LVLUP GAMES",
          "sku": "810024460328"
        },
        {
          "name": "Advent Games",
          "sku": "CBD01"
        },
        {
          "name": "Dragon’s Den Games",
          "sku": "28471"
        },
        {
          "name": "WoodForSheep Hobbies Ltd.",
          "sku": "BEZCATX"
        },
        {
          "name": "Boardlandia",
          "sku": "BEZCATX-DD"
        }
      ],
      "edit_url": "/products/listing-edit?objectId=pBGkEnPTsn&product_line=Board Games&type=product",
      "players": "2-5",
      "playtime": "20-40",
      "msrp_text": "$29.95",
      "price_text": "Price: N/A",
      "tags": [
        "Cat in the Box: Deluxe Edition (PREORDER) - Default Title (wolfpack)"
      ],
      "images": {
        "thumb": "https://d2k4q26owzy373.cloudfront.net/40x40/games/uploaded/1654550166660",
        "small": "https://d2k4q26owzy373.cloudfront.net/150x150/games/uploaded/1654550166660",
        "medium": "https://d2k4q26owzy373.cloudfront.net/350x350/games/uploaded/1654550166660",
        "large": "https://d2k4q26owzy373.cloudfront.net/700x700/games/uploaded/1654550166660",
        "original": "https://s3-us-west-1.amazonaws.com/5cc.images/games/uploaded/1654550166660"
      },
      "description_preview": "  Cat in the Box: Deluxe Edition  is the quintessential quantum trick-taking card game for 2 - 5 cool cats, where your card's color isn’t defined until you play it! Hypothesize how many tricks you will win, and record your bid. Place tokens on the community research board as you play your hand, and connect large groups of tokens to score even more points. Plan your tricks carefully as you cannot claim the color of a card with the same number that has already been declared. Doing so would be pawsitively catastrophic as you have just created a paradox!  (Notice this does not say pair o' dogs.  Gross.)   "
    },
    {
      "id": "5aj8HzAEcL",
      "handle": "the-isle-of-cats-late-arrivals",
      "url": "https://www.boardgameatlas.com/game/5aj8HzAEcL/the-isle-of-cats-late-arrivals",
      "bga_edit_url": "https://www.boardgameatlas.com/game/5aj8HzAEcL/edit",
      "template_url": "/products/listing?objectId=5aj8HzAEcL&product_line=Board Games&type=product",
      "name": "The Isle of Cats: Late Arrivals",
      "price": "17.47",
      "price_ca": "19.89",
      "price_uk": "0.00",
      "price_au": "31.99",
      "msrp": 25,
      "msrps": [
        {
          "country": "US",
          "price": 25
        }
      ],
      "discount": "0.30",
      "year_published": 2020,
      "min_players": 1,
      "max_players": 6,
      "player_counts": [
        1,
        2,
        3,
        4,
        5,
        6
      ],
      "min_playtime": 60,
      "max_playtime": 120,
      "min_age": 8,
      "description": "<p>With more cats, boats, and lesson modules you can now enjoy even more options while playing <em>The Isle of Cats</em>. It also includes the necessary components to support up to 6 players.<br /><br /><strong>Contents:</strong><br />2 Player Boats<br />1 Oshax Figure<br />40 Unique Cat Tiles<br />2 Unique Oshax Tiles<br />10 Unique Rare Treasure Tiles<br />16 Common Treasure Tiles<br />70 Disovery Cards (Including 2 Lesson Modules)<br />20 Fish Tokens</p>\r\n<p> </p>",
      "commentary": "",
      "faq": "",
      "thumb_url": "https://s3-us-west-1.amazonaws.com/5cc.images/games/uploaded/1580943354202",
      "image_url": "https://s3-us-west-1.amazonaws.com/5cc.images/games/uploaded/1580943354202",
      "matches_specs": null,
      "specs": [],
      "mechanics": [
        {
          "id": "iWODHwRGuU",
          "url": "https://www.boardgameatlas.com/mechanic/iWODHwRGuU/undefined"
        },
        {
          "id": "lA3KUtVFCy",
          "url": "https://www.boardgameatlas.com/mechanic/lA3KUtVFCy/undefined"
        },
        {
          "id": "8PN2HE86wg",
          "url": "https://www.boardgameatlas.com/mechanic/8PN2HE86wg/undefined"
        }
      ],
      "categories": [
        {
          "id": "MWoxgHrOJD",
          "url": "https://www.boardgameatlas.com/category/MWoxgHrOJD/undefined"
        },
        {
          "id": "v4SfYtS2Lr",
          "url": "https://www.boardgameatlas.com/category/v4SfYtS2Lr/undefined"
        },
        {
          "id": "7rV11PKqME",
          "url": "https://www.boardgameatlas.com/category/7rV11PKqME/undefined"
        },
        {
          "id": "WVMOS3s2pb",
          "url": "https://www.boardgameatlas.com/category/WVMOS3s2pb/undefined"
        }
      ],
      "publishers": [
        {
          "id": "oZcHBJkmoL",
          "num_games": null,
          "score": 9999999,
          "game": {},
          "url": "https://www.boardgameatlas.com/publisher/oZcHBJkmoL/undefined",
          "images": {
            "thumb": null,
            "small": null,
            "medium": null,
            "large": null,
            "original": null
          }
        },
        {
          "id": "quC7I8nHtg",
          "num_games": null,
          "score": 9999999,
          "game": {},
          "url": "https://www.boardgameatlas.com/publisher/quC7I8nHtg/undefined",
          "images": {
            "thumb": null,
            "small": null,
            "medium": null,
            "large": null,
            "original": null
          }
        },
        {
          "id": "mFJ3imEWZT",
          "num_games": null,
          "score": 9999999,
          "game": {},
          "url": "https://www.boardgameatlas.com/publisher/mFJ3imEWZT/undefined",
          "images": {
            "thumb": null,
            "small": null,
            "medium": null,
            "large": null,
            "original": null
          }
        },
        {
          "id": "vbLOOGREaH",
          "num_games": null,
          "score": 9999999,
          "game": {},
          "url": "https://www.boardgameatlas.com/publisher/vbLOOGREaH/undefined",
          "images": {
            "thumb": null,
            "small": null,
            "medium": null,
            "large": null,
            "original": null
          }
        },
        {
          "id": "FQD3Hj0ZEg",
          "num_games": null,
          "score": 9999999,
          "game": {},
          "url": "https://www.boardgameatlas.com/publisher/FQD3Hj0ZEg/undefined",
          "images": {
            "thumb": null,
            "small": null,
            "medium": null,
            "large": null,
            "original": null
          }
        },
        {
          "id": "akA8FITXfC",
          "num_games": null,
          "score": 9999999,
          "game": {},
          "url": "https://www.boardgameatlas.com/publisher/akA8FITXfC/undefined",
          "images": {
            "thumb": null,
            "small": null,
            "medium": null,
            "large": null,
            "original": null
          }
        }
      ],
      "designers": [
        {
          "id": "CnsusME10T",
          "num_games": null,
          "score": 9999999,
          "game": {},
          "url": "https://www.boardgameatlas.com/designer/CnsusME10T/undefined",
          "images": {
            "thumb": null,
            "small": null,
            "medium": null,
            "large": null,
            "original": null
          }
        }
      ],
      "primary_publisher": {
        "id": "oZcHBJkmoL",
        "name": "The City of Games",
        "url": "https://www.boardgameatlas.com/publisher/oZcHBJkmoL/the-city-of-games"
      },
      "primary_designer": {
        "id": "CnsusME10T",
        "name": "Frank West",
        "url": "https://www.boardgameatlas.com/designer/CnsusME10T/frank-west"
      },
      "developers": [],
      "related_to": [],
      "related_as": [
        "expansion"
      ],
      "artists": [
        "Dragolisco",
        "Frank West"
      ],
      "names": [],
      "rules_url": "https://thecityofkings.com/wp-content/uploads/2019/12/TIOC-Late-Arrivals-Release-v1.0.pdf",
      "official_url": "https://thecityofkings.com/games/the-isle-of-cats/late-arrivals/?utm_source=boardgameatlas.com&utm_medium=search&utm_campaign=bga_ads",
      "sell_sheet_url": null,
      "store_images_url": null,
      "comment_count": 0,
      "num_user_ratings": 10,
      "average_user_rating": 4.2,
      "historical_low_prices": [
        {
          "country": "AU",
          "date": "2021-12-30T05:21:41.802Z",
          "price": 34.14,
          "isLow": false
        },
        {
          "country": "CA",
          "date": "2022-01-27T03:14:41.573Z",
          "price": 22.99,
          "isLow": false
        },
        {
          "country": "UK",
          "date": "2022-03-18T12:46:17.134Z",
          "price": 29.41,
          "isLow": false
        },
        {
          "country": "US",
          "date": "2023-03-30T12:19:21.901Z",
          "price": 17.47,
          "isLow": false
        }
      ],
      "active": true,
      "num_user_complexity_votes": 0,
      "average_learning_complexity": 0,
      "average_strategy_complexity": 0,
      "visits": 1627,
      "lists": 271,
      "mentions": 0,
      "links": 0,
      "plays": 23,
      "rank": 9999999,
      "type": "expansion",
      "upc": "5060716750014",
      "num_distributors": 2,
      "trending_rank": 0,
      "listing_clicks": 0,
      "is_historical_low": false,
      "skus": [
        "TCOK603",
        "2148631778",
        "TCOK603-DD",
        "CZE 02583",
        "5060716750014",
        "CLA01",
        "99911",
        "72555",
        "2148974262",
        "47472 #0593",
        "95012:141870",
        "BG-000743-001",
        "GUP2770"
      ],
      "sku_objects": [
        {
          "name": "Boarding School Games",
          "sku": "TCOK603"
        },
        {
          "name": "Noble Knight Games",
          "sku": "2148631778"
        },
        {
          "name": "Boardlandia",
          "sku": "TCOK603-DD"
        },
        {
          "name": "Boarding School Games",
          "sku": "CZE 02583"
        },
        {
          "name": "401 Games",
          "sku": "5060716750014"
        },
        {
          "name": "Advent Games",
          "sku": "CLA01"
        },
        {
          "name": "Game Shack Inc.",
          "sku": "99911"
        },
        {
          "name": "Hanabee",
          "sku": "72555"
        },
        {
          "name": "Noble Knight Games",
          "sku": "2148974262"
        },
        {
          "name": "Funagain Games",
          "sku": "47472 #0593"
        },
        {
          "name": "BoardGameCo",
          "sku": "95012:141870"
        },
        {
          "name": "Meeples and Milkshakes",
          "sku": "BG-000743-001"
        },
        {
          "name": "Miniature Market",
          "sku": "GUP2770"
        }
      ],
      "edit_url": "/products/listing-edit?objectId=5aj8HzAEcL&product_line=Board Games&type=product",
      "players": "1-6",
      "playtime": "60-120",
      "msrp_text": "$25.00",
      "price_text": "$17.47",
      "tags": [
        "Die Insel der Katzen: Nachzügler-Erweiterung",
        "La Isla de Los Gatos: Recién llegados",
        "L'Île des Chats: Derniers Arrivants",
        "Острів котів: Запізнілі гості",
        "Остров кошек: Долгожданные гости",
        "The Isle of Cats Late Arrivals Expansion Bundle",
        "The Isle of Cats: Late Arrivals",
        "The Isle of Cats Late Arrivals 5 6 Player Expansion",
        "The Isle of Cats: Late Arrivals Expansion",
        "The Isle of Cats Late Arrivals board game",
        "The Isle of Cats Late Arrivals",
        "The Isle of Cats Late Arrivals Expansion",
        "THE ISLE OF CATS LATE ARRIVALS EXPANSION",
        "The Isle of Cats Late Arrivals 5 6 Player Ex",
        "THE ISLE OF CATS LATE ARRIVALS",
        "The Isle Of Cats Late Arrivals Expansion",
        "THE ISLE OF CATS LATE ARRIVALS ENGLISH",
        "Isle of Cats Late Arrivals"
      ],
      "images": {
        "thumb": "https://d2k4q26owzy373.cloudfront.net/40x40/games/uploaded/1580943354202",
        "small": "https://d2k4q26owzy373.cloudfront.net/150x150/games/uploaded/1580943354202",
        "medium": "https://d2k4q26owzy373.cloudfront.net/350x350/games/uploaded/1580943354202",
        "large": "https://d2k4q26owzy373.cloudfront.net/700x700/games/uploaded/1580943354202",
        "original": "https://s3-us-west-1.amazonaws.com/5cc.images/games/uploaded/1580943354202"
      },
      "description_preview": " With more cats, boats, and lesson modules you can now enjoy even more options while playing  The Isle of Cats . It also includes the necessary components to support up to 6 players.   Contents:  2 Player Boats 1 Oshax Figure 40 Unique Cat Tiles 2 Unique Oshax Tiles 10 Unique Rare Treasure Tiles 16 Common Treasure Tiles 70 Disovery Cards (Including 2 Lesson Modules) 20 Fish Tokens \r\n   "
    },
    {
      "id": "nWbDJTqOcH",
      "handle": "the-isle-of-cats-kickstarter-pack",
      "url": "https://www.boardgameatlas.com/game/nWbDJTqOcH/the-isle-of-cats-kickstarter-pack",
      "bga_edit_url": "https://www.boardgameatlas.com/game/nWbDJTqOcH/edit",
      "template_url": "/products/listing?objectId=nWbDJTqOcH&product_line=Board Games&type=product",
      "name": "The Isle of Cats: Kickstarter Pack",
      "price": "0.00",
      "price_ca": "0.00",
      "price_uk": "0.00",
      "price_au": "0.00",
      "msrp": "0.00",
      "discount": "0.00",
      "year_published": 2020,
      "min_players": 1,
      "max_players": 4,
      "player_counts": [
        1,
        2,
        3,
        4
      ],
      "min_playtime": 60,
      "max_playtime": 90,
      "min_age": 8,
      "description": "",
      "commentary": "",
      "faq": "",
      "thumb_url": "https://s3-us-west-1.amazonaws.com/5cc.images/games/uploaded/1570477203200",
      "image_url": "https://s3-us-west-1.amazonaws.com/5cc.images/games/uploaded/1570477203200",
      "matches_specs": null,
      "specs": [],
      "mechanics": [],
      "categories": [],
      "publishers": [
        {
          "id": "oZcHBJkmoL",
          "num_games": null,
          "score": 9999999,
          "game": {},
          "url": "https://www.boardgameatlas.com/publisher/oZcHBJkmoL/undefined",
          "images": {
            "thumb": null,
            "small": null,
            "medium": null,
            "large": null,
            "original": null
          }
        }
      ],
      "designers": [
        {
          "id": "CnsusME10T",
          "num_games": null,
          "score": 9999999,
          "game": {},
          "url": "https://www.boardgameatlas.com/designer/CnsusME10T/undefined",
          "images": {
            "thumb": null,
            "small": null,
            "medium": null,
            "large": null,
            "original": null
          }
        }
      ],
      "primary_publisher": {
        "name": "The City of Games",
        "id": "oZcHBJkmoL",
        "url": "https://www.boardgameatlas.com/publisher/oZcHBJkmoL/the-city-of-games"
      },
      "primary_designer": {
        "name": "Frank West",
        "id": "CnsusME10T",
        "url": "https://www.boardgameatlas.com/designer/CnsusME10T/frank-west"
      },
      "developers": [],
      "related_to": [],
      "related_as": [
        "expansion"
      ],
      "artists": [
        "Dragolisco",
        "Frank West"
      ],
      "names": [],
      "rules_url": null,
      "official_url": null,
      "comment_count": 0,
      "num_user_ratings": 7,
      "average_user_rating": 4.214285714285714,
      "active": true,
      "num_user_complexity_votes": 0,
      "average_learning_complexity": 0,
      "average_strategy_complexity": 0,
      "visits": 1086,
      "lists": 171,
      "mentions": 0,
      "links": 0,
      "plays": 30,
      "rank": 9999999,
      "type": "expansion",
      "num_distributors": 0,
      "trending_rank": 0,
      "listing_clicks": 0,
      "is_historical_low": false,
      "skus": [
        "2149179209"
      ],
      "sku_objects": [
        {
          "name": "Noble Knight Games",
          "sku": "2149179209"
        }
      ],
      "edit_url": "/products/listing-edit?objectId=nWbDJTqOcH&product_line=Board Games&type=product",
      "players": "1-4",
      "playtime": "60-90",
      "price_text": "Price: N/A",
      "tags": [],
      "images": {
        "thumb": "https://d2k4q26owzy373.cloudfront.net/40x40/games/uploaded/1570477203200",
        "small": "https://d2k4q26owzy373.cloudfront.net/150x150/games/uploaded/1570477203200",
        "medium": "https://d2k4q26owzy373.cloudfront.net/350x350/games/uploaded/1570477203200",
        "large": "https://d2k4q26owzy373.cloudfront.net/700x700/games/uploaded/1570477203200",
        "original": "https://s3-us-west-1.amazonaws.com/5cc.images/games/uploaded/1570477203200"
      },
      "description_preview": ""
    },
    {
      "id": "52AwJzIgGg",
      "handle": "raccoon-tycoon-the-fat-cat-expansion",
      "url": "https://www.boardgameatlas.com/game/52AwJzIgGg/raccoon-tycoon-the-fat-cat-expansion",
      "bga_edit_url": "https://www.boardgameatlas.com/game/52AwJzIgGg/edit",
      "template_url": "/products/listing?objectId=52AwJzIgGg&product_line=Board Games&type=product",
      "name": "Raccoon Tycoon: The Fat Cat Expansion",
      "price": "0.00",
      "price_ca": "43.95",
      "price_uk": "0.00",
      "price_au": "79.19",
      "msrp": 49.99,
      "msrps": [
        {
          "country": "US",
          "price": 49.99
        },
        {
          "country": "CA",
          "price": 98.95
        }
      ],
      "discount": "0.00",
      "year_published": 2019,
      "min_players": 2,
      "max_players": 6,
      "player_counts": [
        2,
        3,
        4,
        5,
        6
      ],
      "min_playtime": 30,
      "max_playtime": 120,
      "min_age": 8,
      "description": "<p><em><strong>The Fat Cat Expansion</strong></em> to <em>Raccoon Tycoon</em> adds new content that increases the number of players to six, adds new depth to the gameplay, fun new components and exciting new strategies.</p>\r\n<p><em>The Fat Cat</em> expansion adds two wild card railroads, new meeples that can be acquired for extra victory points, many more buildings that add extra strategies, player boards, and a new set of Railroad and town cards that allow a sixth player to be added.</p>",
      "commentary": "",
      "faq": "",
      "thumb_url": "https://s3-us-west-1.amazonaws.com/5cc.images/games/uploaded/1558157642126",
      "image_url": "https://s3-us-west-1.amazonaws.com/5cc.images/games/uploaded/1558157642126",
      "matches_specs": null,
      "specs": [],
      "mechanics": [
        {
          "id": "AZxlPpi5oq",
          "url": "https://www.boardgameatlas.com/mechanic/AZxlPpi5oq/undefined"
        },
        {
          "id": "lA3KUtVFCy",
          "url": "https://www.boardgameatlas.com/mechanic/lA3KUtVFCy/undefined"
        }
      ],
      "categories": [
        {
          "id": "MWoxgHrOJD",
          "url": "https://www.boardgameatlas.com/category/MWoxgHrOJD/undefined"
        },
        {
          "id": "v4SfYtS2Lr",
          "url": "https://www.boardgameatlas.com/category/v4SfYtS2Lr/undefined"
        }
      ],
      "publishers": [
        {
          "id": "WTqA23KAej",
          "num_games": null,
          "score": 9999999,
          "game": {},
          "url": "https://www.boardgameatlas.com/publisher/WTqA23KAej/undefined",
          "images": {
            "thumb": null,
            "small": null,
            "medium": null,
            "large": null,
            "original": null
          }
        }
      ],
      "designers": [
        {
          "id": "La22hDG6Bl",
          "num_games": null,
          "score": 9999999,
          "game": {},
          "url": "https://www.boardgameatlas.com/designer/La22hDG6Bl/undefined",
          "images": {
            "thumb": null,
            "small": null,
            "medium": null,
            "large": null,
            "original": null
          }
        }
      ],
      "primary_publisher": {
        "id": "WTqA23KAej",
        "name": "Forbidden Games",
        "url": "https://www.boardgameatlas.com/publisher/WTqA23KAej/forbidden-games"
      },
      "primary_designer": {
        "id": "La22hDG6Bl",
        "name": "Glenn Drover",
        "url": "https://www.boardgameatlas.com/designer/La22hDG6Bl/glenn-drover"
      },
      "developers": [],
      "related_to": [],
      "related_as": [
        "expansion"
      ],
      "artists": [
        "Annie Stegg Gerard"
      ],
      "names": [],
      "rules_url": null,
      "official_url": "https://www.kickstarter.com/projects/954412004/raccoon-tycoon-the-fat-cat-expansion?utm_source=boardgameatlas.com&utm_medium=search&utm_campaign=bga_ads",
      "sell_sheet_url": null,
      "store_images_url": null,
      "comment_count": 0,
      "num_user_ratings": 4,
      "average_user_rating": 3.71375,
      "historical_low_prices": [
        {
          "country": "CA",
          "date": "2022-05-19T16:06:12.714Z",
          "price": 43.95,
          "isLow": false
        }
      ],
      "active": true,
      "num_user_complexity_votes": 0,
      "average_learning_complexity": 0,
      "average_strategy_complexity": 0,
      "visits": 788,
      "lists": 67,
      "mentions": 0,
      "links": 0,
      "plays": 0,
      "rank": 9999999,
      "type": "expansion",
      "sku": "FRB1311",
      "upc": "852068008111",
      "num_distributors": 1,
      "trending_rank": 0,
      "listing_clicks": 0,
      "is_historical_low": false,
      "skus": [
        "FRB1311",
        "FRB1310"
      ],
      "sku_objects": [
        {
          "name": "Card Haus",
          "sku": "FRB1311"
        },
        {
          "name": "BoardGameBliss Inc",
          "sku": "FRB1310"
        }
      ],
      "edit_url": "/products/listing-edit?objectId=52AwJzIgGg&product_line=Board Games&type=product",
      "players": "2-6",
      "playtime": "30-120",
      "msrp_text": "$49.99",
      "price_text": "Price: N/A",
      "tags": [],
      "images": {
        "thumb": "https://d2k4q26owzy373.cloudfront.net/40x40/games/uploaded/1558157642126",
        "small": "https://d2k4q26owzy373.cloudfront.net/150x150/games/uploaded/1558157642126",
        "medium": "https://d2k4q26owzy373.cloudfront.net/350x350/games/uploaded/1558157642126",
        "large": "https://d2k4q26owzy373.cloudfront.net/700x700/games/uploaded/1558157642126",
        "original": "https://s3-us-west-1.amazonaws.com/5cc.images/games/uploaded/1558157642126"
      },
      "description_preview": "   The Fat Cat Expansion   to  Raccoon Tycoon  adds new content that increases the number of players to six, adds new depth to the gameplay, fun new components and exciting new strategies. \r\n  The Fat Cat  expansion adds two wild card railroads, new meeples that can be acquired for extra victory points, many more buildings that add extra strategies, player boards, and a new set of Railroad and town cards that allow a sixth player to be added. "
    },
    {
      "id": "T8EAxCb7ka",
      "handle": "cat-lady-premium-edition",
      "url": "https://www.boardgameatlas.com/game/T8EAxCb7ka/cat-lady-premium-edition",
      "bga_edit_url": "https://www.boardgameatlas.com/game/T8EAxCb7ka/edit",
      "template_url": "/products/listing?objectId=T8EAxCb7ka&product_line=Board Games&type=product",
      "name": "Cat Lady: Premium Edition",
      "price": "0.00",
      "price_ca": "24.99",
      "price_uk": "0.00",
      "price_au": "41.99",
      "msrp": 29.9,
      "msrps": [
        {
          "country": "UK",
          "price": 28.99
        },
        {
          "country": "US",
          "price": 29.9
        }
      ],
      "discount": "0.00",
      "year_published": 2019,
      "min_players": 2,
      "max_players": 4,
      "player_counts": [
        2,
        3,
        4
      ],
      "min_playtime": 15,
      "max_playtime": 30,
      "min_age": 14,
      "description": "",
      "commentary": "",
      "faq": "",
      "thumb_url": "https://s3-us-west-1.amazonaws.com/5cc.images/games/uploaded/1609453278456",
      "image_url": "https://s3-us-west-1.amazonaws.com/5cc.images/games/uploaded/1609453278456",
      "matches_specs": null,
      "specs": [],
      "mechanics": [
        {
          "id": "iWODHwRGuU",
          "url": "https://www.boardgameatlas.com/mechanic/iWODHwRGuU/undefined"
        },
        {
          "id": "lA3KUtVFCy",
          "url": "https://www.boardgameatlas.com/mechanic/lA3KUtVFCy/undefined"
        }
      ],
      "categories": [],
      "publishers": [
        {
          "id": "m4T08lQftL",
          "num_games": null,
          "score": 9999999,
          "game": {},
          "url": "https://www.boardgameatlas.com/publisher/m4T08lQftL/undefined",
          "images": {
            "thumb": null,
            "small": null,
            "medium": null,
            "large": null,
            "original": null
          }
        }
      ],
      "designers": [
        {
          "id": "ZFqEl9AFoc",
          "num_games": null,
          "score": 9999999,
          "game": {},
          "url": "https://www.boardgameatlas.com/designer/ZFqEl9AFoc/undefined",
          "images": {
            "thumb": null,
            "small": null,
            "medium": null,
            "large": null,
            "original": null
          }
        }
      ],
      "primary_publisher": {
        "name": "Alderac Entertainment Group",
        "id": "m4T08lQftL",
        "url": "https://www.boardgameatlas.com/publisher/m4T08lQftL/alderac-entertainment-group"
      },
      "primary_designer": {
        "name": "Josh Wood",
        "id": "ZFqEl9AFoc",
        "url": "https://www.boardgameatlas.com/designer/ZFqEl9AFoc/josh-wood"
      },
      "developers": [],
      "related_to": [],
      "related_as": [],
      "artists": [],
      "names": [],
      "rules_url": null,
      "official_url": null,
      "comment_count": 0,
      "num_user_ratings": 8,
      "average_user_rating": 3.90625,
      "historical_low_prices": [
        {
          "country": "AU",
          "date": "2021-03-11T02:59:14.664Z",
          "price": 41.99,
          "isLow": false
        },
        {
          "country": "UK",
          "date": "2021-12-01T04:30:36.028Z",
          "price": 23.05,
          "isLow": false
        },
        {
          "country": "CA",
          "date": "2021-12-03T19:09:22.310Z",
          "price": 29.95,
          "isLow": false
        },
        {
          "country": "US",
          "date": "2022-10-06T12:25:58.938Z",
          "price": 38.53,
          "isLow": false
        }
      ],
      "active": true,
      "num_user_complexity_votes": 0,
      "average_learning_complexity": 0,
      "average_strategy_complexity": 0,
      "visits": 779,
      "lists": 55,
      "mentions": 4,
      "links": 0,
      "plays": 51,
      "rank": 9999999,
      "type": "game",
      "upc": "729220070661",
      "num_distributors": 1,
      "trending_rank": 0,
      "listing_clicks": 0,
      "is_historical_low": false,
      "skus": [
        "97719",
        "CLP01",
        "AEG7066",
        "729220070661"
      ],
      "sku_objects": [
        {
          "name": "Game Shack Inc.",
          "sku": "97719"
        },
        {
          "name": "Advent Games",
          "sku": "CLP01"
        },
        {
          "name": "Gumnut",
          "sku": "AEG7066"
        },
        {
          "name": "Good Games",
          "sku": "729220070661"
        }
      ],
      "edit_url": "/products/listing-edit?objectId=T8EAxCb7ka&product_line=Board Games&type=product",
      "players": "2-4",
      "playtime": "15-30",
      "msrp_text": "$29.90",
      "price_text": "Price: N/A",
      "tags": [
        "Cat Lady: Premium Edition",
        "Cat Lady Premium Edition"
      ],
      "images": {
        "thumb": "https://d2k4q26owzy373.cloudfront.net/40x40/games/uploaded/1609453278456",
        "small": "https://d2k4q26owzy373.cloudfront.net/150x150/games/uploaded/1609453278456",
        "medium": "https://d2k4q26owzy373.cloudfront.net/350x350/games/uploaded/1609453278456",
        "large": "https://d2k4q26owzy373.cloudfront.net/700x700/games/uploaded/1609453278456",
        "original": "https://s3-us-west-1.amazonaws.com/5cc.images/games/uploaded/1609453278456"
      },
      "description_preview": ""
    },
    {
      "id": "wtaPE9hKoz",
      "handle": "fort-cats--dogs-expansion",
      "url": "https://www.boardgameatlas.com/game/wtaPE9hKoz/fort-cats--dogs-expansion",
      "bga_edit_url": "https://www.boardgameatlas.com/game/wtaPE9hKoz/edit",
      "template_url": "/products/listing?objectId=wtaPE9hKoz&product_line=Board Games&type=product",
      "name": "Fort: Cats & Dogs Expansion",
      "price": "10.38",
      "price_ca": "8.99",
      "price_uk": "12.90",
      "price_au": "14.95",
      "msrp": 12.99,
      "msrps": [
        {
          "country": "US",
          "price": 12.99
        },
        {
          "country": "CA",
          "price": 0
        },
        {
          "country": "UK",
          "price": 0
        },
        {
          "country": "AU",
          "price": 0
        }
      ],
      "discount": "0.20",
      "year_published": 2021,
      "min_players": 2,
      "max_players": 4,
      "player_counts": [
        2,
        3,
        4
      ],
      "min_playtime": 20,
      "max_playtime": 40,
      "min_age": 10,
      "description": "<p><em>You’ve begged and pleaded with your parents and finally... it’s time to get a pet! Dogs are loyal. If you play one, it will (usually) stay in your doghouse. But, neglect a dog, and it will wander off. Cats are fickle. Their actions happen at specific times, and they move around a lot. At the end of the game, score points for having the most dogs in your doghouse and for each cat in your yard. You can use one module, or both!</em></p>",
      "commentary": "",
      "faq": "",
      "thumb_url": "https://media.miniaturemarket.com/media/catalog/product/l/e/led02001.jpg",
      "image_url": "https://s3-us-west-1.amazonaws.com/5cc.images/games/uploaded/1629321642453.jpg",
      "matches_specs": null,
      "specs": [],
      "mechanics": [
        {
          "id": "vZsDDAdOoe",
          "url": "https://www.boardgameatlas.com/mechanic/vZsDDAdOoe/undefined"
        },
        {
          "id": "WPytek5P8l",
          "url": "https://www.boardgameatlas.com/mechanic/WPytek5P8l/undefined"
        }
      ],
      "categories": [
        {
          "id": "eX8uuNlQkQ",
          "url": "https://www.boardgameatlas.com/category/eX8uuNlQkQ/undefined"
        }
      ],
      "publishers": [
        {
          "id": "jyc9bV7f9D",
          "num_games": null,
          "score": 9999999,
          "game": {},
          "url": "https://www.boardgameatlas.com/publisher/jyc9bV7f9D/undefined",
          "images": {
            "thumb": null,
            "small": null,
            "medium": null,
            "large": null,
            "original": null
          }
        }
      ],
      "designers": [
        {
          "id": "wGsJOj35ip",
          "num_games": null,
          "score": 9999999,
          "game": {},
          "url": "https://www.boardgameatlas.com/designer/wGsJOj35ip/undefined",
          "images": {
            "thumb": null,
            "small": null,
            "medium": null,
            "large": null,
            "original": null
          }
        },
        {
          "id": "DMeHS5tldJ",
          "num_games": null,
          "score": 9999999,
          "game": {},
          "url": "https://www.boardgameatlas.com/designer/DMeHS5tldJ/undefined",
          "images": {
            "thumb": null,
            "small": null,
            "medium": null,
            "large": null,
            "original": null
          }
        }
      ],
      "primary_publisher": {
        "id": "jyc9bV7f9D",
        "name": "Leder Games",
        "url": "https://www.boardgameatlas.com/publisher/jyc9bV7f9D/leder-games"
      },
      "primary_designer": {
        "id": "wGsJOj35ip",
        "name": "Grant Rodiek",
        "url": "https://www.boardgameatlas.com/designer/wGsJOj35ip/grant-rodiek"
      },
      "developers": [],
      "related_to": [],
      "related_as": [
        "expansion"
      ],
      "artists": [
        "Kyle Ferrin"
      ],
      "names": [],
      "rules_url": null,
      "official_url": null,
      "sell_sheet_url": null,
      "store_images_url": null,
      "comment_count": 0,
      "num_user_ratings": 4,
      "average_user_rating": 3.5625,
      "historical_low_prices": [
        {
          "country": "US",
          "date": "2022-12-02T01:51:03.704Z",
          "price": 10.38,
          "isLow": false
        },
        {
          "country": "UK",
          "date": "2023-03-28T20:08:56.738Z",
          "price": 12.9,
          "isLow": false
        },
        {
          "country": "CA",
          "date": "2023-03-28T20:08:57.332Z",
          "price": 8.99,
          "isLow": false
        },
        {
          "country": "AU",
          "date": "2023-03-30T00:36:28.790Z",
          "price": 14.95,
          "isLow": false
        }
      ],
      "active": true,
      "num_user_complexity_votes": 0,
      "average_learning_complexity": 0,
      "average_strategy_complexity": 0,
      "visits": 756,
      "lists": 188,
      "mentions": 1,
      "links": 0,
      "plays": 12,
      "rank": 9999999,
      "type": "expansion",
      "upc": "672975032944",
      "num_distributors": 5,
      "trending_rank": 0,
      "listing_clicks": 0,
      "is_historical_low": false,
      "skus": [
        "LED 02001",
        "LED02001",
        "93369",
        "672975032944",
        "+3+672975032944",
        "2149214992",
        "BG-001894-001",
        "LEDER02001"
      ],
      "sku_objects": [
        {
          "name": "Boarding School Games",
          "sku": "LED 02001"
        },
        {
          "name": "Gumnut",
          "sku": "LED02001"
        },
        {
          "name": "Hanabee",
          "sku": "93369"
        },
        {
          "name": "401 Games",
          "sku": "672975032944"
        },
        {
          "name": "Boardgame Master",
          "sku": "+3+672975032944"
        },
        {
          "name": "Noble Knight Games",
          "sku": "2149214992"
        },
        {
          "name": "Meeples and Milkshakes",
          "sku": "BG-001894-001"
        },
        {
          "name": "Philibert",
          "sku": "LEDER02001"
        }
      ],
      "edit_url": "/products/listing-edit?objectId=wtaPE9hKoz&product_line=Board Games&type=product",
      "players": "2-4",
      "playtime": "20-40",
      "msrp_text": "$12.99",
      "price_text": "$10.38",
      "tags": [
        "Fort: Cats & Dogs Expansion",
        "Fort Cats Dogs Expansion",
        "Fort Cats Dogs Expansion Pre Order",
        "Fort: Cats & Dogs Expansion *PRE-ORDER*",
        "Fort Cats Dogs",
        "FORT CATS AND DOGS EXPANSION",
        "Fort Cats And Dogs Expansion",
        "Fort: Cats And Dogs Expansion",
        "Fort Cats and Dogs Expansion"
      ],
      "images": {
        "thumb": "https://d2k4q26owzy373.cloudfront.net/40x40/games/uploaded/1629321642453.jpg",
        "small": "https://d2k4q26owzy373.cloudfront.net/150x150/games/uploaded/1629321642453.jpg",
        "medium": "https://d2k4q26owzy373.cloudfront.net/350x350/games/uploaded/1629321642453.jpg",
        "large": "https://d2k4q26owzy373.cloudfront.net/700x700/games/uploaded/1629321642453.jpg",
        "original": "https://s3-us-west-1.amazonaws.com/5cc.images/games/uploaded/1629321642453.jpg"
      },
      "description_preview": "  You’ve begged and pleaded with your parents and finally... it’s time to get a pet! Dogs are loyal. If you play one, it will (usually) stay in your doghouse. But, neglect a dog, and it will wander off. Cats are fickle. Their actions happen at specific times, and they move around a lot. At the end of the game, score points for having the most dogs in your doghouse and for each cat in your yard. You can use one module, or both!  "
    },
    {
      "id": "0VoFC62ZzA",
      "handle": "taco-cat-goat-cheese-pizza",
      "url": "https://www.boardgameatlas.com/game/0VoFC62ZzA/taco-cat-goat-cheese-pizza",
      "bga_edit_url": "https://www.boardgameatlas.com/game/0VoFC62ZzA/edit",
      "template_url": "/products/listing?objectId=0VoFC62ZzA&product_line=Board Games&type=product",
      "name": "Taco! Cat! Goat! Cheese! Pizza!",
      "price": "9.84",
      "price_ca": "10.55",
      "price_uk": "0.00",
      "price_au": "14.95",
      "msrp": 9.99,
      "msrps": [
        {
          "country": "US",
          "price": 9.99
        }
      ],
      "discount": "0.02",
      "year_published": 2018,
      "min_players": 3,
      "max_players": 8,
      "player_counts": [
        3,
        4,
        5,
        6,
        7,
        8
      ],
      "min_playtime": 10,
      "max_playtime": 30,
      "min_age": 8,
      "description": "<p>This addictive game is as unique as its name.  It's a power packed quick and simple party game.  Race against each other to SLAP a match between a card and spoken word. But - watch out! - your mind will play tricks on you.  This game was engineered for maximum fun.  Enjoy!</p>\r\n<p><em>- From Publisher</em></p>",
      "commentary": "",
      "faq": "",
      "thumb_url": "https://s3-us-west-1.amazonaws.com/5cc.images/games/uploaded/1598707861099",
      "image_url": "https://s3-us-west-1.amazonaws.com/5cc.images/games/uploaded/1598707861099",
      "matches_specs": null,
      "specs": [],
      "mechanics": [
        {
          "id": "uZJS07nXF5",
          "url": "https://www.boardgameatlas.com/mechanic/uZJS07nXF5/undefined"
        },
        {
          "id": "E9VKQ8uMSP",
          "url": "https://www.boardgameatlas.com/mechanic/E9VKQ8uMSP/undefined"
        }
      ],
      "categories": [
        {
          "id": "eX8uuNlQkQ",
          "url": "https://www.boardgameatlas.com/category/eX8uuNlQkQ/undefined"
        },
        {
          "id": "X8J7RM6dxX",
          "url": "https://www.boardgameatlas.com/category/X8J7RM6dxX/undefined"
        },
        {
          "id": "PzWI2uaif0",
          "url": "https://www.boardgameatlas.com/category/PzWI2uaif0/undefined"
        }
      ],
      "publishers": [
        {
          "id": "VACuPdrKjb",
          "num_games": null,
          "score": 9999999,
          "game": {},
          "url": "https://www.boardgameatlas.com/publisher/VACuPdrKjb/undefined",
          "images": {
            "thumb": null,
            "small": null,
            "medium": null,
            "large": null,
            "original": null
          }
        }
      ],
      "designers": [
        {
          "id": "H2SEgmLBWj",
          "num_games": null,
          "score": 9999999,
          "game": {},
          "url": "https://www.boardgameatlas.com/designer/H2SEgmLBWj/undefined",
          "images": {
            "thumb": null,
            "small": null,
            "medium": null,
            "large": null,
            "original": null
          }
        }
      ],
      "primary_publisher": {
        "id": "VACuPdrKjb",
        "name": "Dolphin Hat Games",
        "url": "https://www.boardgameatlas.com/publisher/VACuPdrKjb/dolphin-hat-games"
      },
      "primary_designer": {
        "id": "H2SEgmLBWj",
        "name": "Dave Campbell",
        "url": "https://www.boardgameatlas.com/designer/H2SEgmLBWj/dave-campbell"
      },
      "developers": [],
      "related_to": [],
      "related_as": [],
      "artists": [],
      "names": [],
      "rules_url": null,
      "official_url": "https://www.dolphinhat.com/taco-cat-goat-cheese-pizza.html?utm_source=boardgameatlas.com&utm_medium=search&utm_campaign=bga_ads",
      "sell_sheet_url": null,
      "store_images_url": null,
      "comment_count": 0,
      "num_user_ratings": 15,
      "average_user_rating": 3.4333333333333336,
      "historical_low_prices": [
        {
          "country": "AU",
          "date": "2021-11-21T19:06:06.570Z",
          "price": 14.95,
          "isLow": true
        },
        {
          "country": "UK",
          "date": "2021-12-29T04:54:36.441Z",
          "price": 10.95,
          "isLow": false
        },
        {
          "country": "CA",
          "date": "2022-01-27T07:45:18.454Z",
          "price": 13.95,
          "isLow": false
        },
        {
          "country": "US",
          "date": "2023-04-03T14:48:29.045Z",
          "price": 9.84,
          "isLow": false
        }
      ],
      "active": true,
      "num_user_complexity_votes": 0,
      "average_learning_complexity": 0,
      "average_strategy_complexity": 0,
      "visits": 459,
      "lists": 121,
      "mentions": 4,
      "links": 0,
      "plays": 286,
      "rank": 9999999,
      "type": "game",
      "upc": "855836006081",
      "num_distributors": 2,
      "trending_rank": 0,
      "listing_clicks": 0,
      "is_historical_low": false,
      "skus": [
        "DHG TCGCP",
        "DHGTCGCP",
        "2149011237",
        "L2049",
        "0803979090191",
        "803979090191",
        "TCG01",
        "BLUTACO",
        "Ballarat|02dcd191-ae3f-11e9-f336-eed32e6d5cc6",
        "BOGL2001",
        "76954",
        "+1+803979090191",
        "3664824001055",
        "855836006081",
        "BG-000930-001",
        "DOL1001",
        "TACOCAT_SS",
        "BL-9019",
        "OG-060",
        "200981728",
        "BL-9056"
      ],
      "sku_objects": [
        {
          "name": "Boarding School Games",
          "sku": "DHG TCGCP"
        },
        {
          "name": "Card Haus",
          "sku": "DHGTCGCP"
        },
        {
          "name": "Noble Knight Games",
          "sku": "2149011237"
        },
        {
          "name": "Board Game Bandit",
          "sku": "L2049"
        },
        {
          "name": "Imaginaire Shop",
          "sku": "0803979090191"
        },
        {
          "name": "Arctic Board Game",
          "sku": "803979090191"
        },
        {
          "name": "Advent Games",
          "sku": "TCG01"
        },
        {
          "name": "More Than Meeples",
          "sku": "BLUTACO"
        },
        {
          "name": "Guf",
          "sku": "Ballarat|02dcd191-ae3f-11e9-f336-eed32e6d5cc6"
        },
        {
          "name": "Gumnut",
          "sku": "BOGL2001"
        },
        {
          "name": "Hanabee",
          "sku": "76954"
        },
        {
          "name": "Boardgame Master",
          "sku": "+1+803979090191"
        },
        {
          "name": "The Board Game Hut",
          "sku": "3664824001055"
        },
        {
          "name": "Game Kastle",
          "sku": "855836006081"
        },
        {
          "name": "Meeples and Milkshakes",
          "sku": "BG-000930-001"
        },
        {
          "name": "Board's Edge Games",
          "sku": "DOL1001"
        },
        {
          "name": "Gameology",
          "sku": "TACOCAT_SS"
        },
        {
          "name": "WoodForSheep Hobbies Ltd.",
          "sku": "BL-9019"
        },
        {
          "name": "Wayland Games",
          "sku": "OG-060"
        },
        {
          "name": "Bed Bath and Beyond Inc.",
          "sku": "200981728"
        },
        {
          "name": "WoodForSheep Hobbies Ltd.",
          "sku": "BL-9056"
        }
      ],
      "edit_url": "/products/listing-edit?objectId=0VoFC62ZzA&product_line=Board Games&type=product",
      "players": "3-8",
      "playtime": "10-30",
      "msrp_text": "$9.99",
      "price_text": "$9.84",
      "tags": [
        "Taco Cat Goat Cheese Pizza",
        "Taco Cat Goat Cheese Pizza Card Game",
        "Taco Cat Goat Cheese Pizza Blue Orange Edition",
        "TACO CAT GOAT CHEESE PIZZA ENGLISH"
      ],
      "images": {
        "thumb": "https://d2k4q26owzy373.cloudfront.net/40x40/games/uploaded/1598707861099",
        "small": "https://d2k4q26owzy373.cloudfront.net/150x150/games/uploaded/1598707861099",
        "medium": "https://d2k4q26owzy373.cloudfront.net/350x350/games/uploaded/1598707861099",
        "large": "https://d2k4q26owzy373.cloudfront.net/700x700/games/uploaded/1598707861099",
        "original": "https://s3-us-west-1.amazonaws.com/5cc.images/games/uploaded/1598707861099"
      },
      "description_preview": " This addictive game is as unique as its name.  It's a power packed quick and simple party game.  Race against each other to SLAP a match between a card and spoken word. But - watch out! - your mind will play tricks on you.  This game was engineered for maximum fun.  Enjoy! \r\n  - From Publisher  "
    },
    {
      "id": "50u173jcIG",
      "handle": "the-isle-of-cats-kittens--beasts",
      "url": "https://www.boardgameatlas.com/game/50u173jcIG/the-isle-of-cats-kittens--beasts",
      "bga_edit_url": "https://www.boardgameatlas.com/game/50u173jcIG/edit",
      "template_url": "/products/listing?objectId=50u173jcIG&product_line=Board Games&type=product",
      "name": "The Isle of Cats: Kittens + Beasts",
      "price": "23.79",
      "price_ca": "29.95",
      "price_uk": "30.90",
      "price_au": "59.95",
      "msrp": 35,
      "msrps": [
        {
          "country": "US",
          "price": 35
        }
      ],
      "discount": "0.32",
      "year_published": 2022,
      "min_players": 1,
      "max_players": 6,
      "player_counts": [
        1,
        2,
        3,
        4,
        5,
        6
      ],
      "min_playtime": 30,
      "max_playtime": 90,
      "min_age": 8,
      "description": "<p><em><strong>The Isle of Cats: Kittens + Beasts</strong></em> is an expansion for The Isle of Cats adding 3 new expansion modules to the game. It also adds a new lesson module (I) to the game and 6 new family cards.</p>\r\n<p>Each of the 3 expansion modules can be used independently with The Isle of Cats or combined in any way you wish.</p>\r\n<p>Kitten module<br />Complexity: Easy<br />Compatible with: Standard mode, solo mode, family mode, and up to 6-players<br />The Kitten module adds more importance on being the fastest player each day and introduces new options in the form of kittens, without adding much complexity to the game.</p>\r\n<p>Beast module<br />Complexity: Medium<br />Compatible with: Standard mode, solo mode, family mode, and up to 6-players<br />The Beast module adds ancient beasts to the game which provide early game goals while you search for lesson cards. Each beast will only be happy if it is near its friends and you will need to carefully position cat families around these creatures if they are to form friendships and score points.</p>\r\n<p>Event module<br />Complexity: Hard<br />Compatible with: Standard mode, solo mode, and up to 6-players<br />The event module adds rule changing events to rounds 1 and 5, and ways to score points to rounds 2, 3, and 4. This provides another layer of challenge as you will need to adjust your strategies each round, and plan how to best use the rule changes to your advantage.</p>",
      "commentary": "",
      "faq": "",
      "thumb_url": "https://cdn.shopify.com/s/files/1/0274/9631/products/pic6156031.jpg?v=1625364660",
      "image_url": "https://cdn.shopify.com/s/files/1/0274/9631/products/pic6156031.jpg?v=1625364660",
      "matches_specs": null,
      "specs": [],
      "mechanics": [
        {
          "id": "iWODHwRGuU",
          "url": "https://www.boardgameatlas.com/mechanic/iWODHwRGuU/undefined"
        },
        {
          "id": "l5mXIMcD6N",
          "url": "https://www.boardgameatlas.com/mechanic/l5mXIMcD6N/undefined"
        },
        {
          "id": "dITGE93SCS",
          "url": "https://www.boardgameatlas.com/mechanic/dITGE93SCS/undefined"
        },
        {
          "id": "8PN2HE86wg",
          "url": "https://www.boardgameatlas.com/mechanic/8PN2HE86wg/undefined"
        }
      ],
      "categories": [
        {
          "id": "MWoxgHrOJD",
          "url": "https://www.boardgameatlas.com/category/MWoxgHrOJD/undefined"
        },
        {
          "id": "v4SfYtS2Lr",
          "url": "https://www.boardgameatlas.com/category/v4SfYtS2Lr/undefined"
        },
        {
          "id": "7rV11PKqME",
          "url": "https://www.boardgameatlas.com/category/7rV11PKqME/undefined"
        },
        {
          "id": "ZTneo8TaIO",
          "url": "https://www.boardgameatlas.com/category/ZTneo8TaIO/undefined"
        },
        {
          "id": "rrvd68LjOR",
          "url": "https://www.boardgameatlas.com/category/rrvd68LjOR/undefined"
        },
        {
          "id": "WVMOS3s2pb",
          "url": "https://www.boardgameatlas.com/category/WVMOS3s2pb/undefined"
        },
        {
          "id": "VzyslQJGrG",
          "url": "https://www.boardgameatlas.com/category/VzyslQJGrG/undefined"
        },
        {
          "id": "BHxvD7ZjfA",
          "url": "https://www.boardgameatlas.com/category/BHxvD7ZjfA/undefined"
        }
      ],
      "publishers": [
        {
          "id": "oZcHBJkmoL",
          "num_games": null,
          "score": 9999999,
          "game": {},
          "url": "https://www.boardgameatlas.com/publisher/oZcHBJkmoL/undefined",
          "images": {
            "thumb": null,
            "small": null,
            "medium": null,
            "large": null,
            "original": null
          }
        }
      ],
      "designers": [
        {
          "id": "CnsusME10T",
          "num_games": null,
          "score": 9999999,
          "game": {},
          "url": "https://www.boardgameatlas.com/designer/CnsusME10T/undefined",
          "images": {
            "thumb": null,
            "small": null,
            "medium": null,
            "large": null,
            "original": null
          }
        }
      ],
      "primary_publisher": {
        "id": "oZcHBJkmoL",
        "name": "The City of Games",
        "url": "https://www.boardgameatlas.com/publisher/oZcHBJkmoL/the-city-of-games"
      },
      "primary_designer": {
        "id": "CnsusME10T",
        "name": "Frank West",
        "url": "https://www.boardgameatlas.com/designer/CnsusME10T/frank-west"
      },
      "developers": [],
      "related_to": [],
      "related_as": [
        "expansion"
      ],
      "artists": [
        "Dragolisco",
        "Frank West"
      ],
      "names": [],
      "rules_url": "https://thecityofkings.com/wp-content/uploads/2022/02/The-Isle-of-Cats-Kittens-and-beasts-v1.0-compressed.pdf",
      "official_url": "https://thecityofkings.com/games/the-isle-of-cats/kittens-beasts/?utm_source=boardgameatlas.com&utm_medium=search&utm_campaign=bga_ads",
      "sell_sheet_url": null,
      "store_images_url": null,
      "comment_count": 0,
      "num_user_ratings": 0,
      "average_user_rating": 0,
      "historical_low_prices": [
        {
          "country": "CA",
          "date": "2021-08-01T15:52:23.621Z",
          "price": 29.95,
          "isLow": false
        },
        {
          "country": "UK",
          "date": "2021-10-21T15:01:50.166Z",
          "price": 24.16,
          "isLow": false
        },
        {
          "country": "AU",
          "date": "2021-12-08T16:59:46.638Z",
          "price": 50.95,
          "isLow": true
        },
        {
          "country": "US",
          "date": "2023-04-02T11:51:54.063Z",
          "price": 23.79,
          "isLow": true
        }
      ],
      "active": true,
      "num_user_complexity_votes": 0,
      "average_learning_complexity": 0,
      "average_strategy_complexity": 0,
      "visits": 421,
      "lists": 166,
      "mentions": 0,
      "links": 0,
      "plays": 11,
      "rank": 9999999,
      "type": "expansion",
      "sku": "",
      "upc": "5060716750168",
      "isbn": "",
      "video_links": [],
      "availability_status": "Available",
      "num_distributors": 0,
      "trending_rank": 0,
      "listing_clicks": 0,
      "is_historical_low": true,
      "skus": [
        "BG-002801-001",
        "TCOK617",
        "93681",
        "48964 #0213",
        "5060716750168",
        "ICK01"
      ],
      "sku_objects": [
        {
          "name": "Meeples and Milkshakes",
          "sku": "BG-002801-001"
        },
        {
          "name": "Gumnut",
          "sku": "TCOK617"
        },
        {
          "name": "Hanabee",
          "sku": "93681"
        },
        {
          "name": "Funagain Games",
          "sku": "48964 #0213"
        },
        {
          "name": "The Board Game Hut",
          "sku": "5060716750168"
        },
        {
          "name": "Advent Games",
          "sku": "ICK01"
        }
      ],
      "edit_url": "/products/listing-edit?objectId=50u173jcIG&product_line=Board Games&type=product",
      "players": "1-6",
      "playtime": "30-90",
      "msrp_text": "$35.00",
      "price_text": "$23.79",
      "tags": [
        " Die Insel der Katzen: Kätzchen + Biester",
        "La Isla de los Gatos: Mininos y Bestias",
        "L'île des chats: Bêtes + Chatons",
        "Ostrov koček: Koťata a jiná stvoření – 3. rozšíření",
        "Wyspa kotów: Kociaki i bestie",
        "Острів котів: Кошенята і звірята",
        "Остров Кошек: Чудища + Котята",
        "猫岛：小猫与野兽"
      ],
      "images": {
        "thumb": "https://cdn.shopify.com/s/files/1/0274/9631/products/pic6156031.jpg?v=1625364660",
        "small": "https://cdn.shopify.com/s/files/1/0274/9631/products/pic6156031.jpg?v=1625364660",
        "medium": "https://cdn.shopify.com/s/files/1/0274/9631/products/pic6156031.jpg?v=1625364660",
        "large": "https://cdn.shopify.com/s/files/1/0274/9631/products/pic6156031.jpg?v=1625364660",
        "original": "https://cdn.shopify.com/s/files/1/0274/9631/products/pic6156031.jpg?v=1625364660"
      },
      "description_preview": "   The Isle of Cats: Kittens + Beasts   is an expansion for The Isle of Cats adding 3 new expansion modules to the game. It also adds a new lesson module (I) to the game and 6 new family cards. \r\n Each of the 3 expansion modules can be used independently with The Isle of Cats or combined in any way you wish. \r\n Kitten module Complexity: Easy Compatible with: Standard mode, solo mode, family mode, and up to 6-players The Kitten module adds more importance on being the fastest player each day and introduces new options in the form of kittens, without adding much complexity to the game. \r\n Beast module Complexity: Medium Compatible with: Standard mode, solo mode, family mode, and up to 6-players The Beast module adds ancient beasts to the game which provide early game goals while you search for lesson cards. Each beast will only be happy if it is near its friends and you will need to carefully position cat families around these creatures if they are to form friendships and score points. \r\n Event module Complexity: Hard Compatible with: Standard mode, solo mode, and up to 6-players The event module adds rule changing events to rounds 1 and 5, and ways to score points to rounds 2, 3, and 4. This provides another layer of challenge as you will need to adjust your strategies each round, and plan how to best use the rule changes to your advantage. "
    },
    {
      "id": "ToCczr53F8",
      "handle": "cat-lady-box-of-treats-expansion",
      "url": "https://www.boardgameatlas.com/game/ToCczr53F8/cat-lady-box-of-treats-expansion",
      "bga_edit_url": "https://www.boardgameatlas.com/game/ToCczr53F8/edit",
      "template_url": "/products/listing?objectId=ToCczr53F8&product_line=Board Games&type=product",
      "name": "Cat Lady: Box of Treats",
      "price": "15.99",
      "price_ca": "18.89",
      "price_uk": "0.00",
      "price_au": "29.99",
      "msrp": 19.99,
      "msrps": [
        {
          "country": "US",
          "price": 19.99
        }
      ],
      "discount": "0.20",
      "year_published": 2020,
      "min_players": 1,
      "max_players": 6,
      "player_counts": [
        1,
        2,
        3,
        4,
        5,
        6
      ],
      "min_playtime": 30,
      "max_playtime": 30,
      "min_age": 8,
      "description": "<p>New challenges await you and your fellow cat lovers in <em><strong>Cat Lady: Box of Treats</strong></em>.</p>\r\n<p>You need your base game to play, but now you get to manage new items, boxes, and cat treats! Plus there's even more cats to feed with the addition of new stray cats and gray cats! <em>Box of Treats</em> also expands the game to be played with up to six players, so now you'll have to outmaneuver more players to be crowned as the best cat lady in town. Compete for goals, try new strategies, and, as always, keep your cats fed!</p>",
      "commentary": "",
      "faq": "",
      "thumb_url": "https://s3-us-west-1.amazonaws.com/5cc.images/games/uploaded/1580499738952",
      "image_url": "https://s3-us-west-1.amazonaws.com/5cc.images/games/uploaded/1580499738952",
      "matches_specs": null,
      "specs": [],
      "mechanics": [],
      "categories": [],
      "publishers": [
        {
          "id": "m4T08lQftL",
          "num_games": null,
          "score": 9999999,
          "game": {},
          "url": "https://www.boardgameatlas.com/publisher/m4T08lQftL/undefined",
          "images": {
            "thumb": null,
            "small": null,
            "medium": null,
            "large": null,
            "original": null
          }
        },
        {
          "id": "WMPGXFMCJ8",
          "num_games": null,
          "score": 9999999,
          "game": {},
          "url": "https://www.boardgameatlas.com/publisher/WMPGXFMCJ8/undefined",
          "images": {
            "thumb": null,
            "small": null,
            "medium": null,
            "large": null,
            "original": null
          }
        },
        {
          "id": "JRGTRhUq1K",
          "num_games": null,
          "score": 9999999,
          "game": {},
          "url": "https://www.boardgameatlas.com/publisher/JRGTRhUq1K/undefined",
          "images": {
            "thumb": null,
            "small": null,
            "medium": null,
            "large": null,
            "original": null
          }
        }
      ],
      "designers": [
        {
          "id": "ZFqEl9AFoc",
          "num_games": null,
          "score": 9999999,
          "game": {},
          "url": "https://www.boardgameatlas.com/designer/ZFqEl9AFoc/undefined",
          "images": {
            "thumb": null,
            "small": null,
            "medium": null,
            "large": null,
            "original": null
          }
        }
      ],
      "primary_publisher": {
        "id": "m4T08lQftL",
        "name": "Alderac Entertainment Group",
        "url": "https://www.boardgameatlas.com/publisher/m4T08lQftL/alderac-entertainment-group"
      },
      "primary_designer": {
        "id": "ZFqEl9AFoc",
        "name": "Josh Wood",
        "url": "https://www.boardgameatlas.com/designer/ZFqEl9AFoc/josh-wood"
      },
      "developers": [],
      "related_to": [],
      "related_as": [
        "expansion"
      ],
      "artists": [
        "Josh Wood"
      ],
      "names": [],
      "rules_url": null,
      "official_url": null,
      "comment_count": 0,
      "num_user_ratings": 2,
      "average_user_rating": 3.425,
      "historical_low_prices": [
        {
          "country": "UK",
          "date": "2021-12-22T14:30:17.683Z",
          "price": 17.25,
          "isLow": false
        },
        {
          "country": "CA",
          "date": "2022-01-19T02:20:28.584Z",
          "price": 18.95,
          "isLow": false
        },
        {
          "country": "AU",
          "date": "2022-01-21T02:12:28.912Z",
          "price": 29.99,
          "isLow": false
        },
        {
          "country": "US",
          "date": "2023-03-31T17:03:15.880Z",
          "price": 15.99,
          "isLow": false
        }
      ],
      "active": true,
      "num_user_complexity_votes": 0,
      "average_learning_complexity": 0,
      "average_strategy_complexity": 0,
      "visits": 412,
      "lists": 64,
      "mentions": 7,
      "links": 0,
      "plays": 10,
      "rank": 9999999,
      "type": "expansion",
      "sku": "AEG7078",
      "upc": "729220070784",
      "num_distributors": 7,
      "trending_rank": 0,
      "listing_clicks": 0,
      "is_historical_low": false,
      "skus": [
        "AEG 7078",
        "AEG7078",
        "729220070784",
        "99415",
        "2148949576",
        "46995 #0274"
      ],
      "sku_objects": [
        {
          "name": "Boarding School Games",
          "sku": "AEG 7078"
        },
        {
          "name": "Card Haus",
          "sku": "AEG7078"
        },
        {
          "name": "401 Games",
          "sku": "729220070784"
        },
        {
          "name": "Game Shack Inc.",
          "sku": "99415"
        },
        {
          "name": "Noble Knight Games",
          "sku": "2148949576"
        },
        {
          "name": "Funagain Games",
          "sku": "46995 #0274"
        }
      ],
      "edit_url": "/products/listing-edit?objectId=ToCczr53F8&product_line=Board Games&type=product",
      "players": "1-6",
      "playtime": "30",
      "msrp_text": "$19.99",
      "price_text": "$15.99",
      "tags": [
        "Cat Lady: Boldogságdoboz",
        "Cat Lady Box of Treats board game",
        "Cat Lady Box of Treats Expansion",
        "Cat Lady Box of Treats",
        "Cat Lady Box Of Treats Expansion",
        "CAT LADY BOX OF TREATS EXPANSION",
        "CAT LADY BOX OF TREATS EXP"
      ],
      "images": {
        "thumb": "https://d2k4q26owzy373.cloudfront.net/40x40/games/uploaded/1580499738952",
        "small": "https://d2k4q26owzy373.cloudfront.net/150x150/games/uploaded/1580499738952",
        "medium": "https://d2k4q26owzy373.cloudfront.net/350x350/games/uploaded/1580499738952",
        "large": "https://d2k4q26owzy373.cloudfront.net/700x700/games/uploaded/1580499738952",
        "original": "https://s3-us-west-1.amazonaws.com/5cc.images/games/uploaded/1580499738952"
      },
      "description_preview": " New challenges await you and your fellow cat lovers in   Cat Lady: Box of Treats  . \r\n You need your base game to play, but now you get to manage new items, boxes, and cat treats! Plus there's even more cats to feed with the addition of new stray cats and gray cats!  Box of Treats  also expands the game to be played with up to six players, so now you'll have to outmaneuver more players to be crowned as the best cat lady in town. Compete for goals, try new strategies, and, as always, keep your cats fed! "
    },
    {
      "id": "jt3ESXO51i",
      "handle": "cat-rescue",
      "url": "https://www.boardgameatlas.com/game/jt3ESXO51i/cat-rescue",
      "bga_edit_url": "https://www.boardgameatlas.com/game/jt3ESXO51i/edit",
      "template_url": "/products/listing?objectId=jt3ESXO51i&product_line=Board Games&type=product",
      "name": "Cat Rescue",
      "price": "16.91",
      "price_ca": "19.59",
      "price_uk": "0.00",
      "price_au": "0.00",
      "msrp": 16.95,
      "msrps": [
        {
          "country": "US",
          "price": 16.95
        }
      ],
      "discount": "0.00",
      "year_published": 2018,
      "min_players": 1,
      "max_players": 5,
      "player_counts": [
        1,
        2,
        3,
        4,
        5
      ],
      "min_playtime": 15,
      "max_playtime": 30,
      "min_age": 8,
      "description": "<p><em><strong>Cat Rescue</strong></em> is a cooperative game. During the game, players take a turn to take a cat from the street or rescue home and slide it into the cat shelter. When there are three or four cats of the same color in a row or column, cats in the middle are flipped over and now ready for adoption. When the flipped over cats are pushed out of the shelter, they are adopted to their new loving home. The game ends when the deck is depleted or when a rescue home has three cats. Players together receive a &quot;Cat Rescue&quot; title based on the number of cats that are flipped and adopted.</p>\r\n<p>The first edition lists 1 to 4 players, and the second edition lists 1 to 5 players.</p>",
      "commentary": "",
      "faq": "",
      "thumb_url": "https://s3-us-west-1.amazonaws.com/5cc.images/games/uploaded/1597458959795",
      "image_url": "https://s3-us-west-1.amazonaws.com/5cc.images/games/uploaded/1597458959795",
      "matches_specs": null,
      "specs": [],
      "mechanics": [
        {
          "id": "9mNukNBxfZ",
          "url": "https://www.boardgameatlas.com/mechanic/9mNukNBxfZ/undefined"
        },
        {
          "id": "9YdRn9J9oZ",
          "url": "https://www.boardgameatlas.com/mechanic/9YdRn9J9oZ/undefined"
        },
        {
          "id": "lA3KUtVFCy",
          "url": "https://www.boardgameatlas.com/mechanic/lA3KUtVFCy/undefined"
        }
      ],
      "categories": [
        {
          "id": "MWoxgHrOJD",
          "url": "https://www.boardgameatlas.com/category/MWoxgHrOJD/undefined"
        },
        {
          "id": "HKaYVNIxAJ",
          "url": "https://www.boardgameatlas.com/category/HKaYVNIxAJ/undefined"
        },
        {
          "id": "ge8pIhEUGE",
          "url": "https://www.boardgameatlas.com/category/ge8pIhEUGE/undefined"
        }
      ],
      "publishers": [
        {
          "id": "uAM8FSlwmn",
          "num_games": null,
          "score": 9999999,
          "game": {},
          "url": "https://www.boardgameatlas.com/publisher/uAM8FSlwmn/undefined",
          "images": {
            "thumb": null,
            "small": null,
            "medium": null,
            "large": null,
            "original": null
          }
        },
        {
          "id": "3Mo4giBvrH",
          "num_games": null,
          "score": 9999999,
          "game": {},
          "url": "https://www.boardgameatlas.com/publisher/3Mo4giBvrH/undefined",
          "images": {
            "thumb": null,
            "small": null,
            "medium": null,
            "large": null,
            "original": null
          }
        }
      ],
      "designers": [
        {
          "id": "FUWhPqagtb",
          "num_games": null,
          "score": 9999999,
          "game": {},
          "url": "https://www.boardgameatlas.com/designer/FUWhPqagtb/undefined",
          "images": {
            "thumb": null,
            "small": null,
            "medium": null,
            "large": null,
            "original": null
          }
        }
      ],
      "primary_publisher": {
        "name": "Sunrise Tornado Game Studio",
        "id": "uAM8FSlwmn",
        "url": "https://www.boardgameatlas.com/publisher/uAM8FSlwmn/sunrise-tornado-game-studio"
      },
      "primary_designer": {
        "name": "Ta-Te Wu",
        "id": "FUWhPqagtb",
        "url": "https://www.boardgameatlas.com/designer/FUWhPqagtb/tate-wu"
      },
      "developers": [],
      "related_to": [],
      "related_as": [],
      "artists": [
        "Kaiami"
      ],
      "names": [],
      "rules_url": null,
      "official_url": null,
      "comment_count": 0,
      "num_user_ratings": 6,
      "average_user_rating": 3.5,
      "historical_low_prices": [
        {
          "country": "CA",
          "date": "2022-01-07T14:55:04.523Z",
          "price": 19.59,
          "isLow": false
        },
        {
          "country": "US",
          "date": "2023-03-28T18:35:04.932Z",
          "price": 16.91,
          "isLow": false
        }
      ],
      "active": true,
      "num_user_complexity_votes": 0,
      "average_learning_complexity": 0,
      "average_strategy_complexity": 0,
      "visits": 410,
      "lists": 32,
      "mentions": 0,
      "links": 0,
      "plays": 18,
      "rank": 9999999,
      "type": "game",
      "num_distributors": 0,
      "trending_rank": 0,
      "listing_clicks": 0,
      "is_historical_low": false,
      "skus": [
        "CHR 8035",
        "2149022792",
        "92149:111909",
        "Base + 3 Expansions",
        "Base Game Only (RCB-CAT)",
        "CHR8035"
      ],
      "sku_objects": [
        {
          "name": "Boarding School Games",
          "sku": "CHR 8035"
        },
        {
          "name": "Noble Knight Games",
          "sku": "2149022792"
        },
        {
          "name": "BoardGameCo",
          "sku": "92149:111909"
        },
        {
          "name": "BoardGameBliss Inc",
          "sku": "Base + 3 Expansions"
        },
        {
          "name": "BoardGameBliss Inc",
          "sku": "Base Game Only (RCB-CAT)"
        },
        {
          "name": "Boardlandia",
          "sku": "CHR8035"
        }
      ],
      "edit_url": "/products/listing-edit?objectId=jt3ESXO51i&product_line=Board Games&type=product",
      "players": "1-5",
      "playtime": "15-30",
      "msrp_text": "$16.95",
      "price_text": "$16.91",
      "tags": [],
      "images": {
        "thumb": "https://d2k4q26owzy373.cloudfront.net/40x40/games/uploaded/1597458959795",
        "small": "https://d2k4q26owzy373.cloudfront.net/150x150/games/uploaded/1597458959795",
        "medium": "https://d2k4q26owzy373.cloudfront.net/350x350/games/uploaded/1597458959795",
        "large": "https://d2k4q26owzy373.cloudfront.net/700x700/games/uploaded/1597458959795",
        "original": "https://s3-us-west-1.amazonaws.com/5cc.images/games/uploaded/1597458959795"
      },
      "description_preview": "   Cat Rescue   is a cooperative game. During the game, players take a turn to take a cat from the street or rescue home and slide it into the cat shelter. When there are three or four cats of the same color in a row or column, cats in the middle are flipped over and now ready for adoption. When the flipped over cats are pushed out of the shelter, they are adopted to their new loving home. The game ends when the deck is depleted or when a rescue home has three cats. Players together receive a \"Cat Rescue\" title based on the number of cats that are flipped and adopted. \r\n The first edition lists 1 to 4 players, and the second edition lists 1 to 5 players. "
    },
    {
      "id": "gCStQtec7x",
      "handle": "the-isle-of-cats-explore--draw",
      "url": "https://www.boardgameatlas.com/game/gCStQtec7x/the-isle-of-cats-explore--draw",
      "bga_edit_url": "https://www.boardgameatlas.com/game/gCStQtec7x/edit",
      "template_url": "/products/listing?objectId=gCStQtec7x&product_line=Board Games&type=product",
      "name": "The Isle of Cats Explore & Draw",
      "price": "20.97",
      "price_ca": "21.47",
      "price_uk": "0.00",
      "price_au": "44.95",
      "msrp": 30,
      "msrps": [
        {
          "country": "US",
          "price": 30
        }
      ],
      "discount": "0.30",
      "year_published": 2022,
      "min_players": 1,
      "max_players": 6,
      "player_counts": [
        1,
        2,
        3,
        4,
        5,
        6
      ],
      "min_playtime": 30,
      "max_playtime": 45,
      "min_age": 8,
      "description": "<p><em><strong>The Isle of Cats Explore &amp; Draw</strong></em> features gameplay like <em>The Isle of Cats</em>, but with players now choosing a set of cards each round instead of drafting, and then drawing their discoveries onto their boat. <em>Explore &amp; Draw</em> is a competitive, polyomino cat-placement board game for 1-6 players that is ideal for a quick break or taking to a friend’s house.</p>\r\n<p>In the game, you are citizens of Squalls End on a rescue mission to The Isle of Cats and must rescue as many cats as possible before the evil Lord Vesh arrives. Each cat is represented by a unique shape and belongs to a family, you must find a way to make them all fit on your boat while keeping families together.</p>\r\n<p>You will also find treasures, Oshax (special cats), and ancient lessons which give you another personal way of scoring points.</p>\r\n<p>Complete lessons, fill your boat, and keep cat families together to score points, and the player with the most points after seven rounds wins.</p>\r\n<p><em>- From Publisher</em></p>",
      "commentary": "",
      "faq": "",
      "thumb_url": "https://s3-us-west-1.amazonaws.com/5cc.images/games/userfiles/1645480632879-IsleofCatsExploreandDraw_3dBoxArt.jpg",
      "image_url": "https://s3-us-west-1.amazonaws.com/5cc.images/games/userfiles/1645480632879-IsleofCatsExploreandDraw_3dBoxArt.jpg",
      "matches_specs": null,
      "specs": [],
      "mechanics": [
        {
          "id": "l5mXIMcD6N",
          "url": "https://www.boardgameatlas.com/mechanic/l5mXIMcD6N/undefined"
        },
        {
          "id": "MaXzmoZUoX",
          "url": "https://www.boardgameatlas.com/mechanic/MaXzmoZUoX/undefined"
        },
        {
          "id": "9YdRn9J9oZ",
          "url": "https://www.boardgameatlas.com/mechanic/9YdRn9J9oZ/undefined"
        },
        {
          "id": "lA3KUtVFCy",
          "url": "https://www.boardgameatlas.com/mechanic/lA3KUtVFCy/undefined"
        },
        {
          "id": "uZR0NCIA6D",
          "url": "https://www.boardgameatlas.com/mechanic/uZR0NCIA6D/undefined"
        },
        {
          "id": "m9IFaYKaOA",
          "url": "https://www.boardgameatlas.com/mechanic/m9IFaYKaOA/undefined"
        }
      ],
      "categories": [
        {
          "id": "MWoxgHrOJD",
          "url": "https://www.boardgameatlas.com/category/MWoxgHrOJD/undefined"
        },
        {
          "id": "ZTneo8TaIO",
          "url": "https://www.boardgameatlas.com/category/ZTneo8TaIO/undefined"
        },
        {
          "id": "WVMOS3s2pb",
          "url": "https://www.boardgameatlas.com/category/WVMOS3s2pb/undefined"
        }
      ],
      "publishers": [
        {
          "id": "oZcHBJkmoL",
          "num_games": null,
          "score": 9999999,
          "game": {},
          "url": "https://www.boardgameatlas.com/publisher/oZcHBJkmoL/undefined",
          "images": {
            "thumb": null,
            "small": null,
            "medium": null,
            "large": null,
            "original": null
          }
        }
      ],
      "designers": [
        {
          "id": "CnsusME10T",
          "num_games": null,
          "score": 9999999,
          "game": {},
          "url": "https://www.boardgameatlas.com/designer/CnsusME10T/undefined",
          "images": {
            "thumb": null,
            "small": null,
            "medium": null,
            "large": null,
            "original": null
          }
        }
      ],
      "primary_publisher": {
        "id": "oZcHBJkmoL",
        "name": "The City of Games",
        "url": "https://www.boardgameatlas.com/publisher/oZcHBJkmoL/the-city-of-games"
      },
      "primary_designer": {
        "id": "CnsusME10T",
        "name": "Frank West",
        "url": "https://www.boardgameatlas.com/designer/CnsusME10T/frank-west"
      },
      "developers": [],
      "related_to": [],
      "related_as": [],
      "artists": [
        "Dragolisco",
        "Frank West"
      ],
      "names": [],
      "rules_url": "https://thecityofkings.com/wp-content/uploads/2022/02/The-Isle-of-Cats-Explore-and-Draw-v1.0-compressed.pdf",
      "official_url": "https://thecityofkings.com/games/explore-draw/?utm_source=boardgameatlas.com&utm_medium=search&utm_campaign=bga_ads",
      "sell_sheet_url": null,
      "store_images_url": null,
      "comment_count": 0,
      "num_user_ratings": 3,
      "average_user_rating": 3.3333333333333335,
      "historical_low_prices": [
        {
          "country": "CA",
          "date": "2021-07-30T01:19:16.083Z",
          "price": 25.95,
          "isLow": false
        },
        {
          "country": "UK",
          "date": "2021-10-25T23:58:45.495Z",
          "price": 22.37,
          "isLow": false
        },
        {
          "country": "AU",
          "date": "2021-12-02T05:40:32.351Z",
          "price": 42.95,
          "isLow": false
        },
        {
          "country": "US",
          "date": "2023-03-30T22:52:42.321Z",
          "price": 20.97,
          "isLow": false
        }
      ],
      "active": true,
      "num_user_complexity_votes": 0,
      "average_learning_complexity": 0,
      "average_strategy_complexity": 0,
      "visits": 365,
      "lists": 112,
      "mentions": 0,
      "links": 0,
      "plays": 99,
      "rank": 9999999,
      "type": "game",
      "sku": "",
      "upc": "5060716750205",
      "isbn": "",
      "video_links": [],
      "availability_status": "Available",
      "num_distributors": 0,
      "trending_rank": 0,
      "listing_clicks": 0,
      "is_historical_low": false,
      "skus": [
        "5060716750205",
        "93680",
        "BG-002803-001",
        "48962 #0723",
        "TCOK690",
        "ICE01",
        "TCOK690-DDD",
        "TCOK690-FS"
      ],
      "sku_objects": [
        {
          "name": "Good Games",
          "sku": "5060716750205"
        },
        {
          "name": "Hanabee",
          "sku": "93680"
        },
        {
          "name": "Meeples and Milkshakes",
          "sku": "BG-002803-001"
        },
        {
          "name": "Funagain Games",
          "sku": "48962 #0723"
        },
        {
          "name": "WoodForSheep Hobbies Ltd.",
          "sku": "TCOK690"
        },
        {
          "name": "Advent Games",
          "sku": "ICE01"
        },
        {
          "name": "Boardlandia",
          "sku": "TCOK690-DDD"
        },
        {
          "name": "Boardlandia",
          "sku": "TCOK690-FS"
        }
      ],
      "edit_url": "/products/listing-edit?objectId=gCStQtec7x&product_line=Board Games&type=product",
      "players": "1-6",
      "playtime": "30-45",
      "msrp_text": "$30.00",
      "price_text": "$20.97",
      "tags": [
        "The Isle of Cats Explore Draw Pre Order",
        "The Isle of Cats Explore & Draw *PRE-ORDER*",
        "The Isle of Cats Explore Draw",
        "The Isle of Cats Explore Draw PREORDER",
        "The Isle of Cats: Explore & Draw",
        "The Isle of Cats: Explore and Draw [Pre-Order]",
        "The Isle of Cats - Explore and Draw - Dent and Ding (Major Damage)"
      ],
      "images": {
        "thumb": "https://d2k4q26owzy373.cloudfront.net/40x40/games/userfiles/1645480632879-IsleofCatsExploreandDraw_3dBoxArt.jpg",
        "small": "https://d2k4q26owzy373.cloudfront.net/150x150/games/userfiles/1645480632879-IsleofCatsExploreandDraw_3dBoxArt.jpg",
        "medium": "https://d2k4q26owzy373.cloudfront.net/350x350/games/userfiles/1645480632879-IsleofCatsExploreandDraw_3dBoxArt.jpg",
        "large": "https://d2k4q26owzy373.cloudfront.net/700x700/games/userfiles/1645480632879-IsleofCatsExploreandDraw_3dBoxArt.jpg",
        "original": "https://s3-us-west-1.amazonaws.com/5cc.images/games/userfiles/1645480632879-IsleofCatsExploreandDraw_3dBoxArt.jpg"
      },
      "description_preview": "   The Isle of Cats Explore & Draw   features gameplay like  The Isle of Cats , but with players now choosing a set of cards each round instead of drafting, and then drawing their discoveries onto their boat.  Explore & Draw  is a competitive, polyomino cat-placement board game for 1-6 players that is ideal for a quick break or taking to a friend’s house. \r\n In the game, you are citizens of Squalls End on a rescue mission to The Isle of Cats and must rescue as many cats as possible before the evil Lord Vesh arrives. Each cat is represented by a unique shape and belongs to a family, you must find a way to make them all fit on your boat while keeping families together. \r\n You will also find treasures, Oshax (special cats), and ancient lessons which give you another personal way of scoring points. \r\n Complete lessons, fill your boat, and keep cat families together to score points, and the player with the most points after seven rounds wins. \r\n  - From Publisher  "
    },
    {
      "id": "lDXyNzhcOB",
      "handle": "top-trumps",
      "url": "https://www.boardgameatlas.com/game/lDXyNzhcOB/top-trumps",
      "bga_edit_url": "https://www.boardgameatlas.com/game/lDXyNzhcOB/edit",
      "template_url": "/products/listing?objectId=lDXyNzhcOB&product_line=Board Games&type=product",
      "name": "Top Trumps",
      "price": "9.99",
      "price_ca": "9.89",
      "price_uk": "0.00",
      "price_au": "6.45",
      "msrp": 9.99,
      "msrps": [
        {
          "country": "US",
          "price": 9.99
        }
      ],
      "discount": "0.00",
      "year_published": 1968,
      "min_players": 2,
      "max_players": 6,
      "player_counts": [
        2,
        3,
        4,
        5,
        6
      ],
      "min_playtime": 20,
      "max_playtime": 20,
      "min_age": 6,
      "description": "<p><strong>Top Trumps</strong> has been a very popular card game in the United Kingdom since the seventies. There are many different card decks with various subject matter, i.e. Cars, Planes, Films, Military Jets, famous TV shows, etc...</p>\r\n\r\n<p>Top Trumps are now also available in the USA, based on the classic card game &quot;War&quot;, it's played by choosing your best stat, trumping (beating) your opponent’s card, and winning the entire deck.</p>\r\n\r\n<p>Each pack of Top Trumps consists of a number of cards (usually 30 or 32), each of which features in-game characters based on related subject matter which are full of stats, pictures and educational and interesting facts. The game is multiplayer and fits handily in the pocket so it can be played anywhere.</p>\r\n\r\n<p>2-6 people can play. Deal out all the cards face down to the players. Each player holds their cards face up but may ONLY look at their top card.</p>\r\n\r\n<p>The player to go first chooses the ‘best’ statistic (usually the highest) from their top card, e.g. “Top Speed 252mph”. All other players read out the SAME statistic. Whoever has the best or highest value wins and places all the top cards including their own to the bottom of their pile. They then choose the statistic for the next round.</p>\r\n\r\n<p>During a round, if 2 or more cards ‘tie’ or no data is available for that particular statistic then all the cards are placed to one side and the same player chooses again from their next card. The winner of the hand also takes the cards that were placed to one side.</p>\r\n\r\n<p>The first player to win all the cards is the winner of the game!</p>\r\n\r\n<p>Latest Packs available in the USA include - Royal Wedding Top Trumps, Moshi Monsters, Harry Potter and the Deathly Hallows, US Presidents, US States, New York City, Marvel Ultimate Heroes, Soccer Stars and Soccer Stadiums, Greek Mythology, US Army, G.I. Joe, Ice Age, Transformers 2, Bugs, Baby Animals, Horses &amp; Ponies, Star Wars, Clone Wars, Indiana Jones, James Bond, The Simpsons, Doctor Who, NBA 2010, Bugs, Dinosaurs 2010, Predators 2010, The Dog, Wildlife and Sealife In Danger, Military Jets, Ancient Egypt, and DC Super Heroes 1 and 2. As well as Star Wars and Marvel Top Trumps Tournament games.</p>\r\n\r\n<p>The more familiar you are with the deck the better since you will gain from knowing what particular cards have a superior statistic compared to other cards. This adds a memory factor to the game. The cards have pictures of the subject matter and are packed with statistics and facts, and can also help improve on reading, math, and social skills.</p>",
      "commentary": "",
      "faq": "",
      "thumb_url": "https://s3-us-west-1.amazonaws.com/5cc.images/games/uploaded/1547308077249",
      "image_url": "https://s3-us-west-1.amazonaws.com/5cc.images/games/uploaded/1547308077249",
      "matches_specs": null,
      "specs": [],
      "mechanics": [
        {
          "id": "iWODHwRGuU",
          "url": "https://www.boardgameatlas.com/mechanic/iWODHwRGuU/undefined"
        },
        {
          "id": "r6yIFvyXDD",
          "url": "https://www.boardgameatlas.com/mechanic/r6yIFvyXDD/undefined"
        },
        {
          "id": "j7x8jY4ay2",
          "url": "https://www.boardgameatlas.com/mechanic/j7x8jY4ay2/undefined"
        },
        {
          "id": "3GSQl800lk",
          "url": "https://www.boardgameatlas.com/mechanic/3GSQl800lk/undefined"
        }
      ],
      "categories": [],
      "publishers": [
        {
          "id": "oFIGIC4bxh",
          "num_games": null,
          "score": 9999999,
          "game": {},
          "url": "https://www.boardgameatlas.com/publisher/oFIGIC4bxh/undefined",
          "images": {
            "thumb": null,
            "small": null,
            "medium": null,
            "large": null,
            "original": null
          }
        }
      ],
      "designers": [],
      "primary_publisher": {
        "name": "AMIGO",
        "id": "oFIGIC4bxh",
        "url": "https://www.boardgameatlas.com/publisher/oFIGIC4bxh/amigo"
      },
      "primary_designer": {},
      "developers": [],
      "related_to": [],
      "related_as": [],
      "artists": [
        "Steven Austin",
        "Chris Barnardo",
        "Quentin Blake",
        "Chiara Bonello",
        "René Goscinny"
      ],
      "names": [],
      "rules_url": null,
      "official_url": null,
      "comment_count": 0,
      "num_user_ratings": 6,
      "average_user_rating": 2,
      "historical_low_prices": [
        {
          "country": "AU",
          "date": "2021-09-05T12:40:24.158Z",
          "price": 4.95,
          "isLow": true
        },
        {
          "country": "UK",
          "date": "2021-12-13T13:29:14.718Z",
          "price": 3.79,
          "isLow": false
        },
        {
          "country": "CA",
          "date": "2021-12-13T13:29:22.867Z",
          "price": 6.99,
          "isLow": true
        },
        {
          "country": "US",
          "date": "2023-02-18T22:35:22.399Z",
          "price": 9.99,
          "isLow": false
        }
      ],
      "active": true,
      "num_user_complexity_votes": 0,
      "average_learning_complexity": 0,
      "average_strategy_complexity": 0,
      "visits": 324,
      "lists": 43,
      "mentions": 0,
      "links": 0,
      "plays": 15,
      "rank": 9999999,
      "type": "game",
      "upc": "846626004134",
      "num_distributors": 4,
      "trending_rank": 0,
      "listing_clicks": 0,
      "is_historical_low": false,
      "skus": [
        "2149276691",
        "30452",
        "R0332_TOP_STAR_IV-VI_L",
        "R0813_TTDINOSAURS_L",
        "R0827_TOPFROZEN_L",
        "R0831_TTWONDERWORLD_L",
        "R0835_TTHORRIBLE_L",
        "TT-186",
        "TT-209",
        "TT-214",
        "TT-292",
        "TT-296",
        "TT_MARVEL_YOUR_HERO_L",
        "TT_MILITARYJETS_L",
        "TT_TRAINS_L",
        "WM00247- FRE-6",
        "WM01695- FRE-6",
        "WIN-0688",
        "WIN-0447",
        "WMA038119",
        "WMA01528",
        "WMA01119",
        "WMA01017",
        "5036905044851",
        "WMA01608"
      ],
      "sku_objects": [
        {
          "name": "Noble Knight Games",
          "sku": "2149276691"
        },
        {
          "name": "Hanabee",
          "sku": "30452"
        },
        {
          "name": "Gameology",
          "sku": "R0332_TOP_STAR_IV-VI_L"
        },
        {
          "name": "Gameology",
          "sku": "R0813_TTDINOSAURS_L"
        },
        {
          "name": "Gameology",
          "sku": "R0827_TOPFROZEN_L"
        },
        {
          "name": "Gameology",
          "sku": "R0831_TTWONDERWORLD_L"
        },
        {
          "name": "Gameology",
          "sku": "R0835_TTHORRIBLE_L"
        },
        {
          "name": "Board Game Bandit",
          "sku": "TT-186"
        },
        {
          "name": "Board Game Bandit",
          "sku": "TT-209"
        },
        {
          "name": "Board Game Bandit",
          "sku": "TT-214"
        },
        {
          "name": "Board Game Bandit",
          "sku": "TT-292"
        },
        {
          "name": "Board Game Bandit",
          "sku": "TT-296"
        },
        {
          "name": "Gameology",
          "sku": "TT_MARVEL_YOUR_HERO_L"
        },
        {
          "name": "Gameology",
          "sku": "TT_MILITARYJETS_L"
        },
        {
          "name": "Gameology",
          "sku": "TT_TRAINS_L"
        },
        {
          "name": "Philibert",
          "sku": "WM00247- FRE-6"
        },
        {
          "name": "Philibert",
          "sku": "WM01695- FRE-6"
        },
        {
          "name": "Philibert",
          "sku": "WIN-0688"
        },
        {
          "name": "Philibert",
          "sku": "WIN-0447"
        },
        {
          "name": "Gumnut",
          "sku": "WMA038119"
        },
        {
          "name": "Gumnut",
          "sku": "WMA01528"
        },
        {
          "name": "Gumnut",
          "sku": "WMA01119"
        },
        {
          "name": "Gumnut",
          "sku": "WMA01017"
        },
        {
          "name": "Good Games",
          "sku": "5036905044851"
        },
        {
          "name": "Gumnut",
          "sku": "WMA01608"
        }
      ],
      "edit_url": "/products/listing-edit?objectId=lDXyNzhcOB&product_line=Board Games&type=product",
      "players": "2-6",
      "playtime": "20",
      "msrp_text": "$9.99",
      "price_text": "$9.99",
      "tags": [
        "Top Trumps Wonders of The World Card Game",
        "Star Wars 4 6 Top Trumps Specials",
        "Star Wars The Force Awakens Top Trumps Specials",
        "Barbie Top Trumps Specials",
        "Miraculous Top Trumps",
        "Candy Crush Soda Saga Top Trumps Specials",
        "Tractors Top Trumps Specials",
        "Guiness World Records Top Trumps Specials",
        "Toy Story 4 Top Trumps Tin",
        "Superhero Girls Top Trumps Specials",
        "Thomas and Friends Top Trumps Activity Pack Tin",
        "Harry Potter Prisoner of Azkaban Top Trumps Minis",
        "New Shopkins Top Trumps Specials",
        "World Football Stars Gold case Top Trumps Specials",
        "World Football Stars Top Trumps Specials",
        "Ireland 30 Things To Do Top Trumps Classics",
        "Ponies Top Trumps Classics",
        "Harry Potter and The Goblet of Fire Top Trumps Specials",
        "Avengers Infinity Top Trumps Specials",
        "Harry Potter and The Prisoner of Azkaban Top Trumps Specials",
        "World Famous Ships Top Trumps Classics",
        "Margate Top Trumps",
        "British Bakes Top Trumps Classics",
        "Rick Morty Bricks and Mortar only Top Trumps Specials",
        "Only Fools And Horses Top Trumps",
        "Minions Top Trumps Specials",
        "Marvel Universe Top Trumps Specials",
        "Rogue One Top Trumps Specials",
        "Movie Stars Top Trumps Classics",
        "Trolls Top Trumps Specials",
        "Thomas Junior Top Trumps Specials",
        "Ultimate Military Jets Top Trumps Classics",
        "Disney Princess Top Trumps Activity Pack",
        "LOTR Collector 60 card Tin Top Trumps Collectors Tin",
        "Top London Galleries Top Trumps Classics",
        "Baby Animals Top Trumps Classics",
        "Exotic Sports Cars Retro Top Trumps Retro",
        "Frozen Moments Top Trumps Specials",
        "Arsenal FC Top Trumps",
        "Shakespeare's plays Top Trumps Classics",
        "Battleships Top Trumps Classics",
        "PJ Masks Junior Top Trumps Specials",
        "Toy Story 4 Top Trumps",
        "Top Trumps STEM Sensational Science",
        "Top Trumps Oi Frog Junior Card Game",
        "Top Trumps STEM Peculliar Problems",
        "Top Trumps STEM Terrific Tech",
        "Horrible Histories Top Trumps Specials",
        "PJ Masks Top Trumps Collectors Tin",
        "Tsum Tsum Top Trumps Specials",
        "Lion King Top Trumps",
        "WWE Top Trumps Specials",
        "Euro Football Stars Top Trumps Specials",
        "Hottest 30 Apps Top Trumps Specials",
        "Chelsea FC 2017 18 Top Trumps Specials",
        "Horror 2 Retro Top Trumps Retro",
        "Dinosaur Roar Jnr Top Trumps",
        "Cats Top Trumps Classics",
        "The Big Bang Theory Top Trumps Specials",
        "Horror 1 Retro Top Trumps Retro",
        "Passenger Planes Top Trumps Classics",
        "Emotis Top 30 Top Trumps Classics",
        "Yu Gi Oh Top Trumps Specials",
        "Avengers Assemble Top Trumps Specials",
        "Paw Patrol Top Trumps Collectors Tin",
        "Liverpool FC Top Trumps",
        "Pikmi Pops Top Trumps",
        "Wonders of the World Top Trumps Classics",
        "Despicable Me 3 Top Trumps Specials",
        "Yo Kai Watch Top Trumps Specials",
        "Harry Potter Greatest Witches And Wizards Top Trumps Specials",
        "Harry Potter and The Order of The Phoenix Top Trumps Specials",
        "Bugs Top Trumps Classics",
        "Shopkins Top Trumps Specials",
        "Harry Potter and The Half Blood Prince Top Trumps Specials",
        "DC Superheroes Top Trumps Specials",
        "Chelsea FC Top Trumps",
        "Peppa Pig Top Trumps Activity Pack Tin",
        "Man City 2017 18 Top Trumps Specials",
        "Frozen Top Trumps Minis",
        "Halo Limited Edition case Top Trumps Specials",
        "Roald Dahl Bricks and Mortar Only Top Trumps Specials",
        "Marvel Comics Retro Top Trumps Specials",
        "Disney 'Classics' Top Trumps Specials",
        "London 30 Things to see Top Trumps Specials",
        "Roald Dahl Vol 2 Top Trumps",
        "Friends Top Trumps Specials",
        "Trolls Top Trumps Collectors Tin",
        "Star Wars 1 3 Top Trumps Specials",
        "Skyscrapers Top Trumps Classics",
        "Harry Potter and The Deathly Hallows 2 Top Trumps Specials",
        "Num Noms Top Trumps Specials",
        "Frozen Top Trumps Specials",
        "Arsenal FC 2017 18 Top Trumps Specials",
        "Independent Unofficial Guide to Minecraft Top Trumps",
        "Creatures of the Deep Top Trumps Classics",
        "Breaking Bad Top Trumps Specials",
        "Dr Who 9 Top Trumps Specials",
        "Paw Patrol Top Trumps Specials",
        "Spiderman Top Trumps Specials",
        "Dinosaurs Top Trumps Classics",
        "Man Utd 2017 18 Top Trumps Specials",
        "Captain America Civil War Top Trumps Specials",
        "Cars 3 Top Trumps Specials",
        "Num Noms Top Trumps Collectors Tin",
        "Harry Potter and The Deathly Hallows 1 Top Trumps Specials",
        "Frozen Top Trumps Collectors Tin",
        "Crazy Cars Retro Top Trumps Retro",
        "Horses Ponies Top Trumps Classics",
        "Star Wars Rebels Top Trumps Specials",
        "Peppa Pig Junior Top Trumps Specials",
        "Grand Prix Heroes Top Trumps Classics",
        "Trains Top Trumps Classics",
        "Farm Animals Top Trumps Classics",
        "Star Trek Top Trumps Specials",
        "Dogs Top Trumps Classics",
        "Cycling Heroes Top Trumps Classics",
        "Predators Top Trumps Classics",
        "Sports Cars Top Trumps Classics",
        "Animal Jam Top Trumps Specials",
        "Awesome Animals Top Trumps Classics",
        "007 Top Trumps Specials",
        "Today's Strikers Retro Top Trumps Retro",
        "Transformers Celebrating 30 years Top Trumps Specials",
        "Man City FC Top Trumps",
        "Star Wars 7 Top Trumps Collectors Tin",
        "Fast Furious Top Trumps Specials",
        "Unofficial Guide to Minecraft Top Trumps Specials",
        "Volcanoes Top Trumps Classics",
        "Star Wars Episodes 4-6 Top Trumps Card Game",
        "Sports Cars Top Trumps Card Game",
        "Predators Top Trumps Card Game",
        "Wonders of the World Top Trumps Card Game",
        "Marvel Universe Top Trumps Card Game",
        "United States Top Trumps Card Game",
        "Space Top Trumps Card Game",
        "Star Wars Death Star Tin",
        "Top Trumps The Independent and Unofficial Guide to Minecraft",
        "Star Wars Ep IV VI Top Trumps Education Game Card Game",
        "Star Wars Ep I III Top Trumps Education Game Card Game",
        "Top Trumps: Avengers Infinity War",
        "Top Trumps: Star Wars Rebels",
        "Top Trumps The Wonders of the World"
      ],
      "images": {
        "thumb": "https://d2k4q26owzy373.cloudfront.net/40x40/games/uploaded/1547308077249",
        "small": "https://d2k4q26owzy373.cloudfront.net/150x150/games/uploaded/1547308077249",
        "medium": "https://d2k4q26owzy373.cloudfront.net/350x350/games/uploaded/1547308077249",
        "large": "https://d2k4q26owzy373.cloudfront.net/700x700/games/uploaded/1547308077249",
        "original": "https://s3-us-west-1.amazonaws.com/5cc.images/games/uploaded/1547308077249"
      },
      "description_preview": "  Top Trumps  has been a very popular card game in the United Kingdom since the seventies. There are many different card decks with various subject matter, i.e. Cars, Planes, Films, Military Jets, famous TV shows, etc... \r\n\r\n Top Trumps are now also available in the USA, based on the classic card game \"War\", it's played by choosing your best stat, trumping (beating) your opponent’s card, and winning the entire deck. \r\n\r\n Each pack of Top Trumps consists of a number of cards (usually 30 or 32), each of which features in-game characters based on related subject matter which are full of stats, pictures and educational and interesting facts. The game is multiplayer and fits handily in the pocket so it can be played anywhere. \r\n\r\n 2-6 people can play. Deal out all the cards face down to the players. Each player holds their cards face up but may ONLY look at their top card. \r\n\r\n The player to go first chooses the ‘best’ statistic (usually the highest) from their top card, e.g. “Top Speed 252mph”. All other players read out the SAME statistic. Whoever has the best or highest value wins and places all the top cards including their own to the bottom of their pile. They then choose the statistic for the next round. \r\n\r\n During a round, if 2 or more cards ‘tie’ or no data is available for that particular statistic then all the cards are placed to one side and the same player chooses again from their next card. The winner of the hand also takes the cards that were placed to one side. \r\n\r\n The first player to win all the cards is the winner of the game! \r\n\r\n Latest Packs available in the USA include - Royal Wedding Top Trumps, Moshi Monsters, Harry Potter and the Deathly Hallows, US Presidents, US States, New York City, Marvel Ultimate Heroes, Soccer Stars and Soccer Stadiums, Greek Mythology, US Army, G.I. Joe, Ice Age, Transformers 2, Bugs, Baby Animals, Horses & Ponies, Star Wars, Clone Wars, Indiana Jones, James Bond, The Simpsons, Doctor Who, NBA 2010, Bugs, Dinosaurs 2010, Predators 2010, The Dog, Wildlife and Sealife In Danger, Military Jets, Ancient Egypt, and DC Super Heroes 1 and 2. As well as Star Wars and Marvel Top Trumps Tournament games. \r\n\r\n The more familiar you are with the deck the better since you will gain from knowing what particular cards have a superior statistic compared to other cards. This adds a memory factor to the game. The cards have pictures of the subject matter and are packed with statistics and facts, and can also help improve on reading, math, and social skills. "
    },
    {
      "id": "xBiG0lt5BL",
      "handle": "a-game-of-cat--mouth",
      "url": "https://www.boardgameatlas.com/game/xBiG0lt5BL/a-game-of-cat--mouth",
      "bga_edit_url": "https://www.boardgameatlas.com/game/xBiG0lt5BL/edit",
      "template_url": "/products/listing?objectId=xBiG0lt5BL&product_line=Board Games&type=product",
      "name": "A Game of Cat & Mouth",
      "price": "19.82",
      "price_ca": "31.95",
      "price_uk": "0.00",
      "price_au": "29.99",
      "msrp": 24.99,
      "msrps": [
        {
          "country": "US",
          "price": 24.99
        },
        {
          "country": "CA",
          "price": 0
        },
        {
          "country": "UK",
          "price": 24.99
        },
        {
          "country": "AU",
          "price": 0
        }
      ],
      "discount": "0.21",
      "year_published": 2020,
      "min_players": 2,
      "max_players": 2,
      "player_counts": [
        2
      ],
      "min_playtime": 15,
      "max_playtime": 15,
      "min_age": 7,
      "description": "<p>A fiercely competitive, magnet-powered, highly addicting, Pinball’ish game! A Game of Cat &amp; Mouth is all about fast-flinging and quick thinking with a touch of precision. In Exploding Kitten’s first two-player game, the first player to land all of the balls of one color onto your opponent’s side wins!  It’s like air hockey, but instead of air and hockey, it’s cats and rainbows! It’s cutthroat multiplayer pinball.</p>\r\n<p><strong>HOW TO PLAY</strong>:</p>\r\n<p>Using the magnetic Kitty Paw Flicker, players must launch colorful balls through Rainbow Ralphing Cat’s Mouth and onto their opponent’s side. </p>\r\n<p>The game is played in rounds and you win a round and score a point if ANY of these things happen: </p>\r\n<ul>\r\n<li>You hit the black “Nose” ball onto your opponent’s side.</li>\r\n<li>All 3 white “Teeth” balls are on your opponent’s side of the board at the same time.</li>\r\n<li>All 8 yellow balls are on your opponent’s side of the board at the same time.</li>\r\n</ul>\r\n<p><strong>WHAT'S INCLUDED:</strong></p>\r\n<ul>\r\n<li>The box IS the game board! It’s portable and easy to set-up: just open and play!</li>\r\n<li>16 catapult-able balls</li>\r\n<li>Two magnetic, human-powered Kitty Paw Flickers (No batteries ever needed. EVER!) </li>\r\n<li>Rainbow Ralphing &quot;Cat Mouth” centerpiece</li>\r\n<li>6 optional wall bumpers (no judgment, we get it) </li>\r\n</ul>",
      "commentary": "",
      "faq": "<p><strong>Who created this game?</strong></p>\n<p>A Game of Cat &amp; Mouth is from the creators of <a class=\"game-preview\" href=\"/game/74f9mzbw9Y/exploding-kittens-card-game\" data-tipped-options=\"ajax: {data: { ids: '74f9mzbw9Y', client_id: 'W0AQGbjlZE' }}\">Exploding Kittens</a>, <a class=\"game-preview\" href=\"/game/SKVJcaynta/throw-throw-burrito-original-edition\" data-tipped-options=\"ajax: {data: { ids: 'SKVJcaynta', client_id: 'W0AQGbjlZE' }}\">Throw Throw Burrito</a>, and more.</p>\n<p><strong>How do you play this game?</strong></p>\n<p>Open up the box, place your magnetic paw, and fling all of your orbs through the cat's mouth before your opponent does! Here's the game in action:</p>\n<div>\n<div class=\"d-block d-sm-none\"><div class=\"iframe-placeholder\" data-html=\"%3Ciframe%20src=%22https://www.youtube.com/embed/3HJs1sDoxsM%22%20width=%22300%22%20height=%22170%22%20frameborder=%220%22%20allowfullscreen=%22allowfullscreen%22%20data-mce-fragment=%221%22%3E%3C/iframe%3E\"></div></div>\n<div class=\"d-none d-sm-block\"><div class=\"iframe-placeholder\" data-html=\"%3Ciframe%20src=%22https://www.youtube.com/embed/3HJs1sDoxsM%22%20width=%22560%22%20height=%22315%22%20frameborder=%220%22%20allowfullscreen=%22allowfullscreen%22%20data-mce-fragment=%221%22%3E%3C/iframe%3E\"></div></div>\n</div>",
      "thumb_url": "https://s3-us-west-1.amazonaws.com/5cc.images/games/uploaded/1602971330304",
      "image_url": "https://s3-us-west-1.amazonaws.com/5cc.images/games/uploaded/1602971330304",
      "matches_specs": null,
      "specs": [],
      "mechanics": [
        {
          "id": "5kvyChnWuO",
          "url": "https://www.boardgameatlas.com/mechanic/5kvyChnWuO/undefined"
        },
        {
          "id": "S0O9ucexPS",
          "url": "https://www.boardgameatlas.com/mechanic/S0O9ucexPS/undefined"
        }
      ],
      "categories": [
        {
          "id": "7rV11PKqME",
          "url": "https://www.boardgameatlas.com/category/7rV11PKqME/undefined"
        }
      ],
      "publishers": [
        {
          "id": "EMP3ZuSJhp",
          "num_games": null,
          "score": 9999999,
          "game": {},
          "url": "https://www.boardgameatlas.com/publisher/EMP3ZuSJhp/undefined",
          "images": {
            "thumb": null,
            "small": null,
            "medium": null,
            "large": null,
            "original": null
          }
        }
      ],
      "designers": [],
      "primary_publisher": {
        "id": "EMP3ZuSJhp",
        "name": "Exploding Kittens",
        "url": "https://www.boardgameatlas.com/publisher/EMP3ZuSJhp/exploding-kittens"
      },
      "primary_designer": {},
      "developers": [],
      "related_to": [],
      "related_as": [],
      "artists": [],
      "names": [],
      "rules_url": "https://shop.explodingkittens.com/products/a-game-of-cat-mouth",
      "official_url": "https://shop.explodingkittens.com/products/a-game-of-cat-mouth?utm_source=boardgameatlas.com&utm_medium=search&utm_campaign=bga_ads",
      "comment_count": 0,
      "num_user_ratings": 2,
      "average_user_rating": 3,
      "historical_low_prices": [
        {
          "country": "UK",
          "date": "2022-12-03T17:00:24.069Z",
          "price": 19.87,
          "isLow": false
        },
        {
          "country": "AU",
          "date": "2022-12-03T17:00:24.213Z",
          "price": 29.99,
          "isLow": false
        },
        {
          "country": "US",
          "date": "2023-03-15T02:30:13.609Z",
          "price": 19.82,
          "isLow": false
        },
        {
          "country": "CA",
          "date": "2023-04-03T03:38:45.010Z",
          "price": 31.95,
          "isLow": false
        }
      ],
      "active": true,
      "num_user_complexity_votes": 0,
      "average_learning_complexity": 0,
      "average_strategy_complexity": 0,
      "visits": 322,
      "lists": 23,
      "mentions": 1,
      "links": 0,
      "plays": 53,
      "rank": 9999999,
      "type": "game",
      "sku": "EKCCATMOUTH1",
      "upc": "852131006419",
      "num_distributors": 7,
      "trending_rank": 0,
      "listing_clicks": 0,
      "is_historical_low": false,
      "skus": [
        "CAT-MOUTH-1",
        "EKG CAT-MOUTH-1",
        "CAT-MOUTH-1-DD",
        "GAME_CAT_MOUSE",
        "852131006419",
        "EK-GOCAM",
        "101197",
        "LONP-202007-5",
        "GCM01",
        "Ballarat|0a6f6e36-8b3f-11eb-f3d6-4b0c94a3848e",
        "EXPCATANDMOUTH",
        "2149088322",
        "BG-001094-001",
        "EKCATMOUTH1",
        "EKCCATMOUTH1",
        "EKGAGCM01",
        "EK0641"
      ],
      "sku_objects": [
        {
          "name": "Boardlandia",
          "sku": "CAT-MOUTH-1"
        },
        {
          "name": "Boarding School Games",
          "sku": "EKG CAT-MOUTH-1"
        },
        {
          "name": "Boardlandia",
          "sku": "CAT-MOUTH-1-DD"
        },
        {
          "name": "Gameology",
          "sku": "GAME_CAT_MOUSE"
        },
        {
          "name": "401 Games",
          "sku": "852131006419"
        },
        {
          "name": "More Than Meeples",
          "sku": "EK-GOCAM"
        },
        {
          "name": "Game Shack Inc.",
          "sku": "101197"
        },
        {
          "name": "Dragon’s Den Games",
          "sku": "LONP-202007-5"
        },
        {
          "name": "Advent Games",
          "sku": "GCM01"
        },
        {
          "name": "Guf",
          "sku": "Ballarat|0a6f6e36-8b3f-11eb-f3d6-4b0c94a3848e"
        },
        {
          "name": "Gumnut",
          "sku": "EXPCATANDMOUTH"
        },
        {
          "name": "Noble Knight Games",
          "sku": "2149088322"
        },
        {
          "name": "Meeples and Milkshakes",
          "sku": "BG-001094-001"
        },
        {
          "name": "Wayland Games",
          "sku": "EKCATMOUTH1"
        },
        {
          "name": "Miniature Market",
          "sku": "EKCCATMOUTH1"
        },
        {
          "name": "Game Nerdz",
          "sku": "EKGAGCM01"
        },
        {
          "name": "Philibert",
          "sku": "EK0641"
        }
      ],
      "edit_url": "/products/listing-edit?objectId=xBiG0lt5BL&product_line=Board Games&type=product",
      "players": "2",
      "playtime": "15",
      "msrp_text": "$24.99",
      "price_text": "$19.82",
      "tags": [
        "A Game of Cat and Mouth",
        "A Game of Cat & Mouth",
        "A Game of Cat Mouth By Exploding Kittens",
        "A Game of Cat and Mouth board game",
        "Game of Cat Mouth A",
        "A Game of Cat Mouth",
        "A Game of Cat Mouth Exploding Kittens Inspired Game",
        "A Game of Cat Mouth Pinball Game",
        "A Game Of Cat And Mouth",
        "A Game of Cat and Mouth by Exploding Kittens Family Friendly Party Games Card Games for Adults Teens Kids",
        "A Game of Cat 38 Mouth by Exploding Kittens",
        "Exploding Kittens A Game of Cat and Mouth"
      ],
      "images": {
        "thumb": "https://d2k4q26owzy373.cloudfront.net/40x40/games/uploaded/1602971330304",
        "small": "https://d2k4q26owzy373.cloudfront.net/150x150/games/uploaded/1602971330304",
        "medium": "https://d2k4q26owzy373.cloudfront.net/350x350/games/uploaded/1602971330304",
        "large": "https://d2k4q26owzy373.cloudfront.net/700x700/games/uploaded/1602971330304",
        "original": "https://s3-us-west-1.amazonaws.com/5cc.images/games/uploaded/1602971330304"
      },
      "description_preview": " A fiercely competitive, magnet-powered, highly addicting, Pinball’ish game! A Game of Cat & Mouth is all about fast-flinging and quick thinking with a touch of precision. In Exploding Kitten’s first two-player game, the first player to land all of the balls of one color onto your opponent’s side wins!  It’s like air hockey, but instead of air and hockey, it’s cats and rainbows! It’s cutthroat multiplayer pinball. \r\n  HOW TO PLAY : \r\n Using the magnetic Kitty Paw Flicker, players must launch colorful balls through Rainbow Ralphing Cat’s Mouth and onto their opponent’s side.  \r\n The game is played in rounds and you win a round and score a point if ANY of these things happen:  \r\n \r\n You hit the black “Nose” ball onto your opponent’s side. \r\n All 3 white “Teeth” balls are on your opponent’s side of the board at the same time. \r\n All 8 yellow balls are on your opponent’s side of the board at the same time. \r\n \r\n  WHAT'S INCLUDED:  \r\n \r\n The box IS the game board! It’s portable and easy to set-up: just open and play! \r\n 16 catapult-able balls \r\n Two magnetic, human-powered Kitty Paw Flickers (No batteries ever needed. EVER!)  \r\n Rainbow Ralphing \"Cat Mouth” centerpiece \r\n 6 optional wall bumpers (no judgment, we get it)  \r\n "
    },
    {
      "id": "z73OCEh2HL",
      "handle": "calico-kickstarter-promo-cats",
      "url": "https://www.boardgameatlas.com/game/z73OCEh2HL/calico-kickstarter-promo-cats",
      "bga_edit_url": "https://www.boardgameatlas.com/game/z73OCEh2HL/edit",
      "template_url": "/products/listing?objectId=z73OCEh2HL&product_line=Board Games&type=product",
      "name": "Calico: Kickstarter Promo Cats",
      "price": "0.00",
      "price_ca": "0.00",
      "price_uk": "0.00",
      "price_au": "0.00",
      "msrp": "0.00",
      "discount": "0.00",
      "year_published": 2020,
      "min_players": 1,
      "max_players": 4,
      "player_counts": [
        1,
        2,
        3,
        4
      ],
      "min_playtime": null,
      "max_playtime": null,
      "min_age": 13,
      "description": "",
      "commentary": "",
      "faq": "",
      "thumb_url": "https://s3-us-west-1.amazonaws.com/5cc.images/games/empty+box+thumb.jpg",
      "image_url": "https://s3-us-west-1.amazonaws.com/5cc.images/games/empty+box.jpg",
      "matches_specs": null,
      "specs": [],
      "mechanics": [],
      "categories": [],
      "publishers": [
        {
          "id": "x7DawOOE5Z",
          "num_games": null,
          "score": 9999999,
          "game": {},
          "url": "https://www.boardgameatlas.com/publisher/x7DawOOE5Z/undefined",
          "images": {
            "thumb": null,
            "small": null,
            "medium": null,
            "large": null,
            "original": null
          }
        }
      ],
      "designers": [
        {
          "id": "GoBiCEiiki",
          "num_games": null,
          "score": 9999999,
          "game": {},
          "url": "https://www.boardgameatlas.com/designer/GoBiCEiiki/undefined",
          "images": {
            "thumb": null,
            "small": null,
            "medium": null,
            "large": null,
            "original": null
          }
        }
      ],
      "primary_publisher": {
        "name": "Flatout Games",
        "id": "x7DawOOE5Z",
        "url": "https://www.boardgameatlas.com/publisher/x7DawOOE5Z/flatout-games"
      },
      "primary_designer": {
        "name": "Kevin Russ",
        "id": "GoBiCEiiki",
        "url": "https://www.boardgameatlas.com/designer/GoBiCEiiki/kevin-russ"
      },
      "developers": [],
      "related_to": [],
      "related_as": [],
      "artists": [
        "Beth Sobel"
      ],
      "names": [],
      "rules_url": null,
      "official_url": null,
      "comment_count": 0,
      "num_user_ratings": 2,
      "average_user_rating": 4.5,
      "active": true,
      "num_user_complexity_votes": 0,
      "average_learning_complexity": 0,
      "average_strategy_complexity": 0,
      "visits": 269,
      "lists": 72,
      "mentions": 0,
      "links": 0,
      "plays": 1,
      "rank": 9999999,
      "type": "game",
      "num_distributors": 0,
      "trending_rank": 0,
      "listing_clicks": 0,
      "is_historical_low": false,
      "edit_url": "/products/listing-edit?objectId=z73OCEh2HL&product_line=Board Games&type=product",
      "players": "1-4",
      "price_text": "Price: N/A",
      "tags": [],
      "images": {
        "thumb": "https://d2k4q26owzy373.cloudfront.net/40x40/games/empty+box.jpg",
        "small": "https://d2k4q26owzy373.cloudfront.net/150x150/games/empty+box.jpg",
        "medium": "https://d2k4q26owzy373.cloudfront.net/350x350/games/empty+box.jpg",
        "large": "https://d2k4q26owzy373.cloudfront.net/700x700/games/empty+box.jpg",
        "original": "https://s3-us-west-1.amazonaws.com/5cc.images/games/empty+box.jpg"
      },
      "description_preview": ""
    },
    {
      "id": "DPA9C0gaLr",
      "handle": "festival-of-thousand-cats",
      "url": "https://www.boardgameatlas.com/game/DPA9C0gaLr/festival-of-thousand-cats",
      "bga_edit_url": "https://www.boardgameatlas.com/game/DPA9C0gaLr/edit",
      "template_url": "/products/listing?objectId=DPA9C0gaLr&product_line=Board Games&type=product",
      "name": "Festival of a Thousand Cats",
      "price": "41.03",
      "price_ca": "17.75",
      "price_uk": "0.00",
      "price_au": "0.00",
      "msrp": 19.95,
      "msrps": [
        {
          "country": "US",
          "price": 19.95
        }
      ],
      "discount": "-1.06",
      "year_published": 2016,
      "min_players": 3,
      "max_players": 4,
      "player_counts": [
        3,
        4
      ],
      "min_playtime": 20,
      "max_playtime": 40,
      "min_age": 7,
      "description": "<p>Enjoy the feast by collecting Fish and Milké (an intoxicating mix of milk and catnip)! Be careful though! Even cats will get incapacitated if they drink too much! (Always drink responsibly!) Cats all over the country are always looking for their next feast. They love Fish and they can’t celebrate without Milké. As long as they have those two, they are all happy!</p>\r\n\r\n<p>Festival of a Thousand Cats is a Trick-taking game that is unlike normal ones - both small and large numbers matter! There are four suits (Spring, Summer, Fall and Winter) in the game. Each season has different distribution of numbers. Think carefully before you play your card! Beware of the crows, and use trump cards well, and you will win more fish than other players!</p>",
      "commentary": "",
      "faq": "",
      "thumb_url": "https://s3-us-west-1.amazonaws.com/5cc.images/games/uploaded/1574391189659",
      "image_url": "https://s3-us-west-1.amazonaws.com/5cc.images/games/uploaded/1574391189659",
      "matches_specs": null,
      "specs": [],
      "mechanics": [
        {
          "id": "WPytek5P8l",
          "url": "https://www.boardgameatlas.com/mechanic/WPytek5P8l/undefined"
        },
        {
          "id": "3GSQl800lk",
          "url": "https://www.boardgameatlas.com/mechanic/3GSQl800lk/undefined"
        }
      ],
      "categories": [],
      "publishers": [
        {
          "id": "bpYLn8Rmdi",
          "num_games": null,
          "score": 9999999,
          "game": {},
          "url": "https://www.boardgameatlas.com/publisher/bpYLn8Rmdi/undefined",
          "images": {
            "thumb": null,
            "small": null,
            "medium": null,
            "large": null,
            "original": null
          }
        },
        {
          "id": "PI20qG6KTy",
          "num_games": null,
          "score": 9999999,
          "game": {},
          "url": "https://www.boardgameatlas.com/publisher/PI20qG6KTy/undefined",
          "images": {
            "thumb": null,
            "small": null,
            "medium": null,
            "large": null,
            "original": null
          }
        }
      ],
      "designers": [
        {
          "id": "JGyJnu80OD",
          "num_games": null,
          "score": 9999999,
          "game": {},
          "url": "https://www.boardgameatlas.com/designer/JGyJnu80OD/undefined",
          "images": {
            "thumb": null,
            "small": null,
            "medium": null,
            "large": null,
            "original": null
          }
        }
      ],
      "primary_publisher": {
        "name": "Tasty Minstrel Games",
        "id": "bpYLn8Rmdi",
        "url": "https://www.boardgameatlas.com/publisher/bpYLn8Rmdi/tasty-minstrel-games"
      },
      "primary_designer": {
        "name": "Fukutarou",
        "id": "JGyJnu80OD",
        "url": "https://www.boardgameatlas.com/designer/JGyJnu80OD/fukutarou"
      },
      "developers": [],
      "related_to": [],
      "related_as": [],
      "artists": [
        "Jody Henning"
      ],
      "names": [
        "Festival of 1000 Cats",
        "万猫の豊明かり",
        "萬貓的慶典"
      ],
      "rules_url": null,
      "official_url": null,
      "comment_count": 0,
      "num_user_ratings": 2,
      "average_user_rating": 3.5,
      "historical_low_prices": [
        {
          "country": "UK",
          "date": "2021-12-12T20:09:56.328Z",
          "price": 21.34,
          "isLow": false
        },
        {
          "country": "CA",
          "date": "2022-01-05T23:34:19.134Z",
          "price": 17.75,
          "isLow": false
        },
        {
          "country": "US",
          "date": "2022-08-17T20:19:12.749Z",
          "price": 41.03,
          "isLow": false
        }
      ],
      "active": true,
      "num_user_complexity_votes": 0,
      "average_learning_complexity": 0,
      "average_strategy_complexity": 0,
      "visits": 254,
      "lists": 44,
      "mentions": 0,
      "links": 0,
      "plays": 10,
      "rank": 9999999,
      "type": "game",
      "sku": "TTT3021",
      "upc": "9781947941007",
      "num_distributors": 3,
      "trending_rank": 0,
      "listing_clicks": 0,
      "is_historical_low": false,
      "skus": [
        "9781947941007",
        "2148997811",
        "TTT3021",
        "8026565771315",
        "TWG-FTC01"
      ],
      "sku_objects": [
        {
          "name": "401 Games",
          "sku": "9781947941007"
        },
        {
          "name": "Noble Knight Games",
          "sku": "2148997811"
        },
        {
          "name": "Advent Games",
          "sku": "TTT3021"
        },
        {
          "name": "BoardGameBliss Inc",
          "sku": "8026565771315"
        },
        {
          "name": "Philibert",
          "sku": "TWG-FTC01"
        }
      ],
      "edit_url": "/products/listing-edit?objectId=DPA9C0gaLr&product_line=Board Games&type=product",
      "players": "3-4",
      "playtime": "20-40",
      "msrp_text": "$19.95",
      "price_text": "$41.03",
      "tags": [
        "Festival of a Thousand Cats",
        "Festival of a Thousand Cats board game",
        "Festival of 1000 Cats",
        "万猫の豊明かり",
        "萬貓的慶典"
      ],
      "images": {
        "thumb": "https://d2k4q26owzy373.cloudfront.net/40x40/games/uploaded/1574391189659",
        "small": "https://d2k4q26owzy373.cloudfront.net/150x150/games/uploaded/1574391189659",
        "medium": "https://d2k4q26owzy373.cloudfront.net/350x350/games/uploaded/1574391189659",
        "large": "https://d2k4q26owzy373.cloudfront.net/700x700/games/uploaded/1574391189659",
        "original": "https://s3-us-west-1.amazonaws.com/5cc.images/games/uploaded/1574391189659"
      },
      "description_preview": " Enjoy the feast by collecting Fish and Milké (an intoxicating mix of milk and catnip)! Be careful though! Even cats will get incapacitated if they drink too much! (Always drink responsibly!) Cats all over the country are always looking for their next feast. They love Fish and they can’t celebrate without Milké. As long as they have those two, they are all happy! \r\n\r\n Festival of a Thousand Cats is a Trick-taking game that is unlike normal ones - both small and large numbers matter! There are four suits (Spring, Summer, Fall and Winter) in the game. Each season has different distribution of numbers. Think carefully before you play your card! Beware of the crows, and use trump cards well, and you will win more fish than other players! "
    },
    {
      "id": "CTdomVd6al",
      "handle": "cat-in-the-box-second-edition-",
      "url": "https://www.boardgameatlas.com/game/CTdomVd6al/cat-in-the-box-second-edition-",
      "bga_edit_url": "https://www.boardgameatlas.com/game/CTdomVd6al/edit",
      "template_url": "/products/listing?objectId=CTdomVd6al&product_line=Board Games&type=product",
      "name": "Cat in the Box (Second edition)",
      "price": "0.00",
      "price_ca": "28.95",
      "price_uk": "0.00",
      "price_au": "0.00",
      "msrp": "0.00",
      "discount": "0.00",
      "year_published": 2021,
      "min_players": 2,
      "max_players": 5,
      "player_counts": [
        2,
        3,
        4,
        5
      ],
      "min_playtime": 20,
      "max_playtime": 40,
      "min_age": 13,
      "description": "",
      "commentary": "",
      "faq": "",
      "thumb_url": "https://s3-us-west-1.amazonaws.com/5cc.images/games/empty+box+thumb.jpg",
      "image_url": "https://s3-us-west-1.amazonaws.com/5cc.images/games/empty+box.jpg",
      "matches_specs": null,
      "specs": [],
      "mechanics": [],
      "categories": [],
      "publishers": [],
      "designers": [],
      "primary_publisher": {},
      "primary_designer": {},
      "developers": [],
      "related_to": [],
      "related_as": [],
      "artists": [],
      "names": [],
      "rules_url": null,
      "official_url": null,
      "sell_sheet_url": null,
      "store_images_url": null,
      "comment_count": 0,
      "num_user_ratings": 4,
      "average_user_rating": 3.9725,
      "active": true,
      "num_user_complexity_votes": 0,
      "average_learning_complexity": 0,
      "average_strategy_complexity": 0,
      "visits": 231,
      "lists": 338,
      "mentions": 0,
      "links": 0,
      "plays": 452,
      "rank": 9999999,
      "type": "game",
      "num_distributors": 0,
      "trending_rank": 0,
      "listing_clicks": 0,
      "is_historical_low": false,
      "edit_url": "/products/listing-edit?objectId=CTdomVd6al&product_line=Board Games&type=product",
      "players": "2-5",
      "playtime": "20-40",
      "price_text": "Price: N/A",
      "tags": [],
      "images": {
        "thumb": "https://d2k4q26owzy373.cloudfront.net/40x40/games/empty+box.jpg",
        "small": "https://d2k4q26owzy373.cloudfront.net/150x150/games/empty+box.jpg",
        "medium": "https://d2k4q26owzy373.cloudfront.net/350x350/games/empty+box.jpg",
        "large": "https://d2k4q26owzy373.cloudfront.net/700x700/games/empty+box.jpg",
        "original": "https://s3-us-west-1.amazonaws.com/5cc.images/games/empty+box.jpg"
      },
      "description_preview": ""
    },
    {
      "id": "9Cq54PqAo1",
      "handle": "cat-caf",
      "url": "https://www.boardgameatlas.com/game/9Cq54PqAo1/cat-caf",
      "bga_edit_url": "https://www.boardgameatlas.com/game/9Cq54PqAo1/edit",
      "template_url": "/products/listing?objectId=9Cq54PqAo1&product_line=Board Games&type=product",
      "name": "Cat Café",
      "price": "0.00",
      "price_ca": "11.99",
      "price_uk": "0.00",
      "price_au": "0.00",
      "msrp": "0.00",
      "discount": "0.00",
      "year_published": 2019,
      "min_players": 2,
      "max_players": 4,
      "player_counts": [
        2,
        3,
        4
      ],
      "min_playtime": 20,
      "max_playtime": 45,
      "min_age": 10,
      "description": "",
      "commentary": "",
      "faq": "",
      "thumb_url": "https://s3-us-west-1.amazonaws.com/5cc.images/games/uploaded/1560884522502",
      "image_url": "https://s3-us-west-1.amazonaws.com/5cc.images/games/uploaded/1560884522502",
      "matches_specs": null,
      "specs": [],
      "mechanics": [],
      "categories": [],
      "publishers": [
        {
          "id": "kYDwJgCh9D",
          "num_games": null,
          "score": 9999999,
          "game": {},
          "url": "https://www.boardgameatlas.com/publisher/kYDwJgCh9D/undefined",
          "images": {
            "thumb": null,
            "small": null,
            "medium": null,
            "large": null,
            "original": null
          }
        },
        {
          "id": "SPwu03HJ3D",
          "num_games": null,
          "score": 9999999,
          "game": {},
          "url": "https://www.boardgameatlas.com/publisher/SPwu03HJ3D/undefined",
          "images": {
            "thumb": null,
            "small": null,
            "medium": null,
            "large": null,
            "original": null
          }
        }
      ],
      "designers": [
        {
          "id": "nDWjK5XRwo",
          "num_games": null,
          "score": 9999999,
          "game": {},
          "url": "https://www.boardgameatlas.com/designer/nDWjK5XRwo/undefined",
          "images": {
            "thumb": null,
            "small": null,
            "medium": null,
            "large": null,
            "original": null
          }
        }
      ],
      "primary_publisher": {
        "name": "Alley Cat Games",
        "id": "kYDwJgCh9D",
        "url": "https://www.boardgameatlas.com/publisher/kYDwJgCh9D/alley-cat-games"
      },
      "primary_designer": {
        "name": "Lee Ju-Hwa",
        "id": "nDWjK5XRwo",
        "url": "https://www.boardgameatlas.com/designer/nDWjK5XRwo/lee-juhwa"
      },
      "developers": [],
      "related_to": [],
      "related_as": [],
      "artists": [],
      "names": [],
      "rules_url": null,
      "official_url": null,
      "comment_count": 0,
      "num_user_ratings": 10,
      "average_user_rating": 3.07585,
      "historical_low_prices": [
        {
          "country": "CA",
          "date": "2021-04-07T11:56:12.867Z",
          "price": 14.33,
          "isLow": true
        },
        {
          "country": "UK",
          "date": "2021-12-08T05:22:45.007Z",
          "price": 11.69,
          "isLow": false
        },
        {
          "country": "US",
          "date": "2022-01-06T02:02:21.604Z",
          "price": 13.49,
          "isLow": false
        }
      ],
      "active": true,
      "num_user_complexity_votes": 0,
      "average_learning_complexity": 0,
      "average_strategy_complexity": 0,
      "visits": 209,
      "lists": 69,
      "mentions": 0,
      "links": 1,
      "plays": 79,
      "rank": 9999999,
      "type": "game",
      "sku": "ACG018",
      "upc": "036000291452",
      "num_distributors": 3,
      "trending_rank": 0,
      "listing_clicks": 0,
      "is_historical_low": false,
      "skus": [
        "ACG018",
        "ACG 018",
        "CAT01",
        "85138",
        "ACG-CC",
        "2148964730"
      ],
      "sku_objects": [
        {
          "name": "Boardlandia",
          "sku": "ACG018"
        },
        {
          "name": "Boarding School Games",
          "sku": "ACG 018"
        },
        {
          "name": "Advent Games",
          "sku": "CAT01"
        },
        {
          "name": "Hanabee",
          "sku": "85138"
        },
        {
          "name": "Philibert",
          "sku": "ACG-CC"
        },
        {
          "name": "Noble Knight Games",
          "sku": "2148964730"
        }
      ],
      "edit_url": "/products/listing-edit?objectId=9Cq54PqAo1&product_line=Board Games&type=product",
      "players": "2-4",
      "playtime": "20-45",
      "price_text": "Price: N/A",
      "tags": [
        "Cat Cafe",
        "Cat Café",
        "Cat Cafe Game"
      ],
      "images": {
        "thumb": "https://d2k4q26owzy373.cloudfront.net/40x40/games/uploaded/1560884522502",
        "small": "https://d2k4q26owzy373.cloudfront.net/150x150/games/uploaded/1560884522502",
        "medium": "https://d2k4q26owzy373.cloudfront.net/350x350/games/uploaded/1560884522502",
        "large": "https://d2k4q26owzy373.cloudfront.net/700x700/games/uploaded/1560884522502",
        "original": "https://s3-us-west-1.amazonaws.com/5cc.images/games/uploaded/1560884522502"
      },
      "description_preview": ""
    },
    {
      "id": "zP55yPfAaE",
      "handle": "the-isle-of-cats-boat-pack",
      "url": "https://www.boardgameatlas.com/game/zP55yPfAaE/the-isle-of-cats-boat-pack",
      "bga_edit_url": "https://www.boardgameatlas.com/game/zP55yPfAaE/edit",
      "template_url": "/products/listing?objectId=zP55yPfAaE&product_line=Board Games&type=product",
      "name": "The Isle of Cats: Boat Pack",
      "price": "17.09",
      "price_ca": "21.89",
      "price_uk": "18.39",
      "price_au": "44.95",
      "msrp": 25,
      "msrps": [
        {
          "country": "US",
          "price": 25
        }
      ],
      "discount": "0.32",
      "year_published": 2022,
      "min_players": 1,
      "max_players": 6,
      "player_counts": [
        1,
        2,
        3,
        4,
        5,
        6
      ],
      "min_playtime": 30,
      "max_playtime": 90,
      "min_age": 8,
      "description": "<p><em><strong>The Isle of Cats: Boat Pack</strong></em> is an expansion for <em>The Isle of Cats</em> adding new boat boards to the game. The Boat Pack expansion introduces 6 new boats, all of which have unique shapes and new layouts. Whether you are playing the standard, family, or solo mode, these new boats will require you to re-evaluate your options, come up with new strategies, and find new ways to fit cats, kittens, and beasts onto your boat.</p>",
      "commentary": "",
      "faq": "",
      "thumb_url": "https://s3-us-west-1.amazonaws.com/5cc.images/games/uploaded/1629321352165.jpg",
      "image_url": "https://s3-us-west-1.amazonaws.com/5cc.images/games/uploaded/1629321352165.jpg",
      "matches_specs": null,
      "specs": [],
      "mechanics": [
        {
          "id": "fUnFqLGvxW",
          "url": "https://www.boardgameatlas.com/mechanic/fUnFqLGvxW/undefined"
        },
        {
          "id": "9YdRn9J9oZ",
          "url": "https://www.boardgameatlas.com/mechanic/9YdRn9J9oZ/undefined"
        },
        {
          "id": "lA3KUtVFCy",
          "url": "https://www.boardgameatlas.com/mechanic/lA3KUtVFCy/undefined"
        },
        {
          "id": "8PN2HE86wg",
          "url": "https://www.boardgameatlas.com/mechanic/8PN2HE86wg/undefined"
        }
      ],
      "categories": [
        {
          "id": "MWoxgHrOJD",
          "url": "https://www.boardgameatlas.com/category/MWoxgHrOJD/undefined"
        },
        {
          "id": "ZTneo8TaIO",
          "url": "https://www.boardgameatlas.com/category/ZTneo8TaIO/undefined"
        },
        {
          "id": "WVMOS3s2pb",
          "url": "https://www.boardgameatlas.com/category/WVMOS3s2pb/undefined"
        }
      ],
      "publishers": [
        {
          "id": "oZcHBJkmoL",
          "num_games": null,
          "score": 9999999,
          "game": {},
          "url": "https://www.boardgameatlas.com/publisher/oZcHBJkmoL/undefined",
          "images": {
            "thumb": null,
            "small": null,
            "medium": null,
            "large": null,
            "original": null
          }
        }
      ],
      "designers": [
        {
          "id": "CnsusME10T",
          "num_games": null,
          "score": 9999999,
          "game": {},
          "url": "https://www.boardgameatlas.com/designer/CnsusME10T/undefined",
          "images": {
            "thumb": null,
            "small": null,
            "medium": null,
            "large": null,
            "original": null
          }
        }
      ],
      "primary_publisher": {
        "id": "oZcHBJkmoL",
        "name": "The City of Games",
        "url": "https://www.boardgameatlas.com/publisher/oZcHBJkmoL/the-city-of-games"
      },
      "primary_designer": {
        "id": "CnsusME10T",
        "name": "Frank West",
        "url": "https://www.boardgameatlas.com/designer/CnsusME10T/frank-west"
      },
      "developers": [],
      "related_to": [],
      "related_as": [
        "expansion"
      ],
      "artists": [
        "Dragolisco",
        "Frank West"
      ],
      "names": [],
      "rules_url": null,
      "official_url": null,
      "sell_sheet_url": null,
      "store_images_url": null,
      "comment_count": 0,
      "num_user_ratings": 0,
      "average_user_rating": 0,
      "historical_low_prices": [
        {
          "country": "CA",
          "date": "2021-08-08T04:13:35.516Z",
          "price": 21.95,
          "isLow": false
        },
        {
          "country": "AU",
          "date": "2021-12-02T12:12:37.733Z",
          "price": 38.95,
          "isLow": true
        },
        {
          "country": "US",
          "date": "2023-04-02T08:29:48.562Z",
          "price": 17.09,
          "isLow": false
        }
      ],
      "active": true,
      "num_user_complexity_votes": 0,
      "average_learning_complexity": 0,
      "average_strategy_complexity": 0,
      "visits": 200,
      "lists": 141,
      "mentions": 0,
      "links": 0,
      "plays": 11,
      "rank": 9999999,
      "type": "expansion",
      "sku": "",
      "upc": "5060716750175",
      "isbn": "",
      "video_links": [],
      "availability_status": "Available",
      "num_distributors": 1,
      "trending_rank": 0,
      "listing_clicks": 0,
      "is_historical_low": false,
      "skus": [
        "BG-002802-001",
        "TCOK618",
        "5060716750175",
        "93682",
        "48963 #0923",
        "ICB01",
        "+1+5060716750175"
      ],
      "sku_objects": [
        {
          "name": "Meeples and Milkshakes",
          "sku": "BG-002802-001"
        },
        {
          "name": "Boardlandia",
          "sku": "TCOK618"
        },
        {
          "name": "Good Games",
          "sku": "5060716750175"
        },
        {
          "name": "Hanabee",
          "sku": "93682"
        },
        {
          "name": "Funagain Games",
          "sku": "48963 #0923"
        },
        {
          "name": "Advent Games",
          "sku": "ICB01"
        },
        {
          "name": "Boardgame Master",
          "sku": "+1+5060716750175"
        }
      ],
      "edit_url": "/products/listing-edit?objectId=zP55yPfAaE&product_line=Board Games&type=product",
      "players": "1-6",
      "playtime": "30-90",
      "msrp_text": "$25.00",
      "price_text": "$17.09",
      "tags": [
        "The Isle of Cats Boat Pack Pre Order",
        "The Isle of Cats: Boat Pack *PRE-ORDER*",
        "The Isle of Cats Boat Pack",
        "Boat Pack The Isle of Cats Expansion",
        "The Isle of Cats Boat Pack Expansion Pack",
        "The Isle of Cats Boat Pack Expansion PREORDER",
        "The Isle of Cats Boat Pack Expansion",
        "THE ISLE OF CATS -  BOAT PACK (ENGLISH)",
        "The Isle of Cats Boat Pack Expansion(Release Date 23 March)"
      ],
      "images": {
        "thumb": "https://d2k4q26owzy373.cloudfront.net/40x40/games/uploaded/1629321352165.jpg",
        "small": "https://d2k4q26owzy373.cloudfront.net/150x150/games/uploaded/1629321352165.jpg",
        "medium": "https://d2k4q26owzy373.cloudfront.net/350x350/games/uploaded/1629321352165.jpg",
        "large": "https://d2k4q26owzy373.cloudfront.net/700x700/games/uploaded/1629321352165.jpg",
        "original": "https://s3-us-west-1.amazonaws.com/5cc.images/games/uploaded/1629321352165.jpg"
      },
      "description_preview": "   The Isle of Cats: Boat Pack   is an expansion for  The Isle of Cats  adding new boat boards to the game. The Boat Pack expansion introduces 6 new boats, all of which have unique shapes and new layouts. Whether you are playing the standard, family, or solo mode, these new boats will require you to re-evaluate your options, come up with new strategies, and find new ways to fit cats, kittens, and beasts onto your boat. "
    }
  ],
  "count": 427
}
  recorded_at: Mon, 17 Jul 2023 18:24:56 GMT
recorded_with: VCR 6.1.0
